import asyncio
import json
import logging
import os
import sys
from contextlib import asynccontextmanager
from datetime import datetime

import redis.asyncio as redis
import aiosqlite
import pytz
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel
import hmac
import hashlib
import base64

from starlette.responses import HTMLResponse

from config_flask_redis import DATABASE_PATH

load_dotenv()

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –∏ —Ñ–∞–π–ª–∞
console_handler = logging.StreamHandler(sys.stdout)
console_handler.stream.reconfigure(encoding='utf-8')  # üëà –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))

file_handler = logging.FileHandler("payments.log", encoding="utf-8")

logging.basicConfig(
    level=logging.INFO,
    handlers=[console_handler, file_handler]
)
logger = logging.getLogger(__name__)
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è Redis-–∫–ª–∏–µ–Ω—Ç–∞
redis_client: redis.Redis = None
#–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ç–µ–Ω–¥ –∏ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É !!!!!!

class PaymentData(BaseModel):
    user_id: int
    payment_id: str
    amount: str
    currency: str
    status: str
    payment_method_id: str
    payload_json: dict




# Lifespan —á–µ—Ä–µ–∑ asynccontextmanager
@asynccontextmanager
async def app_lifespan(app: FastAPI):
    global redis_client
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    PASSWORD_REDIS = os.getenv('password_redis')
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
    redis_client = redis.Redis(host="217.25.91.109", port=6379, password=PASSWORD_REDIS, decode_responses=True)
    logger.info("Redis —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    try:
        await redis_client.ping()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
    yield  # –ó–¥–µ—Å—å FastAPI –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    # –ó–∞–∫—Ä—ã—Ç–∏–µ Redis –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await redis_client.close()
    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI —Å lifespan

app = FastAPI(lifespan=app_lifespan)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ payload –≤ –ë–î
async def save_invalid_payment_to_db(payment_json: dict):
    moscow_tz = pytz.timezone("Europe/Moscow")
    created_at = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")

    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute("""
            INSERT INTO payments (user_id, payment_id, amount, currency, status, payment_method_id, created_at, updated_at, payment_json)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (None, None, None, None, "invalid", None, created_at, created_at, json.dumps(payment_json)))
        await db.commit()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –ë–î
async def save_payment_to_db(payment_data: PaymentData):
    try:
        moscow_tz = pytz.timezone("Europe/Moscow")
        created_at = datetime.now(moscow_tz).strftime("%Y-%m-%d %H:%M:%S")

        async with aiosqlite.connect(DATABASE_PATH) as db:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            async with db.execute("SELECT id FROM payments WHERE payment_id = ?", (payment_data.payment_id,)) as cursor:
                existing_payment = await cursor.fetchone()

            if existing_payment:
                await db.execute("""
                    UPDATE payments
                    SET status = ?, updated_at = ?, payment_json = ?
                    WHERE payment_id = ?
                """, (payment_data.status, created_at, json.dumps(payment_data.payload_json), payment_data.payment_id))
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ —Å payment_id={payment_data.payment_id}")
            else:
                await db.execute("""
                    INSERT INTO payments (chat_id, payment_id, amount, currency, status, payment_method_id, created_at, updated_at, payment_json)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    payment_data.user_id,
                    payment_data.payment_id,
                    payment_data.amount,
                    payment_data.currency,
                    payment_data.status,
                    payment_data.payment_method_id,
                    created_at,
                    created_at,
                    json.dumps(payment_data.payload_json)
                ))
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ —Å payment_id={payment_data.payment_id}")

            await db.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


# –í–µ–±—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@app.post("/webhook")
async def webhook(request: Request):
    logger.info("–ü–æ–ª—É—á–µ–Ω webhook - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    try:

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        headers = dict(request.headers)
        # logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {headers}")
        # logger.info(f",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,")
        # logger.info(f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {body}")

        # # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        # signature = request.headers.get("X-Content-HMAC-SHA256")
        # if not signature:
        #     logger.error("–ü–æ–¥–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
        #     raise HTTPException(status_code=400, detail="Missing signature")
        #
        # # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
        # if not verify_signature(body, signature):
        #     logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
        #     raise HTTPException(status_code=403, detail="Invalid signature")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        payload = await request.json()

        if not payload or "event" not in payload:
            logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'event'")
            raise HTTPException(status_code=400, detail="Missing or invalid payload")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        event_type = payload.get("event")
        payment_info = payload.get("object", {})
        payment_id = payment_info.get("id", "–ù–µ—Ç ID")
        amount = payment_info.get("amount", {}).get("value", "–ù–µ—Ç —Å—É–º–º—ã")
        currency = payment_info.get("amount", {}).get("currency", "–ù–µ—Ç –≤–∞–ª—é—Ç—ã")
        user_id = payment_info.get("metadata", {}).get("user_id")
        payment_method_id = payment_info.get("payment_method", {}).get("id", "0")

        if not user_id:
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞")
            raise HTTPException(status_code=400, detail="Missing user_id")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}, ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}, —Å—É–º–º–∞: {amount} {currency}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = {
            "user_id": user_id,
            "payment_id": payment_id,
            "amount": amount,
            "currency": currency,
            "status": event_type,
            "payment_method_id": payment_method_id,
            "payload_json": payload
        }

        # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Redis
        # await redis_client.lpush("payment_notifications", json.dumps(message))
        # logger.info(f"–ü–ª–∞—Ç—ë–∂ {payment_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å Redis")

        #–î–ª—è —Ç–µ—Å—Ç–æ–≤!!
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Redis
        await redis_client.lpush("payment_notifications_test", json.dumps(message))
        logger.info(f"–ü–ª–∞—Ç—ë–∂ {payment_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å Redis")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        payment_data = PaymentData(
            user_id=user_id,
            payment_id=payment_id,
            amount=amount,
            currency=currency,
            status=event_type,
            payment_method_id=payment_method_id,
            payload_json=payload
        )
        await save_payment_to_db(payment_data)

        return {"status": "ok"}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")


@app.get("/", response_class=HTMLResponse)
async def home():
    return """
    <html>
        <head>
            <title>FastAPI Webhook Receiver</title>
        </head>
        <body>
            <h1>‚úÖ FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
            <p>–û–∂–∏–¥–∞–µ–º webhook –æ—Ç –Æ–∫–∞—Å—Å—ã –Ω–∞ <code>/webhook</code></p>
        </body>
    </html>
    """

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
