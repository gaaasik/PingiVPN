import asyncio
import logging
import os
from datetime import datetime, timedelta
from pathlib import Path
from aiogram import Bot
from aiogram.types import FSInputFile
from dotenv import load_dotenv
from bot.handlers.admin import send_admin_log, ADMIN_CHAT_IDS
from bot.handlers.all_menu import main_menu, menu_buy_vpn, menu_device, menu_my_keys, menu_help, \
    menu_share, menu_connect_vpn, menu_payment, menu_about_pingi, menu_subscriptoin_check
from bot.notification_users.notification_migrate_from_wg import send_initial_update_notification, \
    send_choice_notification, get_stay_on_wg_count
from bot.notification_users.request_payment import process_notifications_request_payment

from bot.payments2.payments_handler_redis import listen_to_redis_queue
#from bot.payments2.payments_handler_redis import listen_to_redis_queue
from bot.handlers import start, support, \
    user_help_request, feedback, app_downloaded,file_or_qr
from bot.notification_users import notification_migrate_from_wg
from bot.utils.cache import cache_media
#from bot.utils.check_status import check_db  #, notify_users_with_free_status
from bot.utils.logger import setup_logger
from bot.database.db import database_path_local  #,  init_db
from bot.database.init_db import init_db
from bot.midlewares.throttling import ThrottlingMiddleware
from bot_instance import BOT_TOKEN, dp, bot
from communication_3x_ui.send_json import process_task_queue
#from fastapi_app.all_utils_flask_db import initialize_db
from models.UserCl import UserCl

from bot.notifications.NotificationManagerCL import NotificationManager
from bot.notifications.UnsubscribedNotificationCL import  UnsubscribedNotification
from bot.notifications.PaymentReminderCL import PaymentReminder
from bot.notifications.TrialEndingNotificationCL import TrialEndingNotification
from bot.notifications.NotificationSchedulerCL import NotificationScheduler
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞

PATH_TO_IMAGES = os.getenv('PATH_TO_IMAGES')
video_path = os.getenv("video_path")
REGISTERED_USERS_DIR = os.getenv('REGISTERED_USERS_DIR')


async def on_startup():
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    image_path = os.path.join(PATH_TO_IMAGES, "Hello.png")
    print('–∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ')
    await cache_media(image_path, video_path)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
async def periodic_task(bot: Bot):

    # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    await asyncio.sleep(86400)
    while True:
        #await notify_users_about_protocol_change(bot)

        count_stay_on_wg = await get_stay_on_wg_count()
        report_text = (
            f"üìä *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n"
            f"{count_stay_on_wg} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–∂–∞–ª–∏ '–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ WireGuard' —Å–µ–≥–æ–¥–Ω—è.\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏—Ö –≤ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ VLESS."
        )
        await send_admin_log(bot, report_text)

        # –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        # await notify_users_with_free_status(bot)
        await asyncio.sleep(86400)


async def send_backup_db_to_admin(bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(database_path_local):
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {database_path_local}")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    from datetime import datetime
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    caption = f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ {current_date}"

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        backup_file = FSInputFile(database_path_local)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
        for admin_chat_id in ADMIN_CHAT_IDS:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –≤ —á–∞—Ç {admin_chat_id}.")
            await bot.send_document(chat_id=admin_chat_id, document=backup_file, caption=caption)

        print("–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")


async def periodic_backup_task(bot: Bot):
    while True:
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()

        # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ 3:00 –Ω–æ—á–∏
        next_3am = datetime.combine(now.date(), datetime.min.time()) + timedelta(hours=15, minutes=7)

        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ—Å–ª–µ 3:00 –Ω–æ—á–∏, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 3:00
        if now > next_3am:
            next_3am += timedelta(days=1)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 3:00
        time_to_sleep = (next_3am - now).total_seconds()

        # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 3:00
        print(f"–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–¥ –≤ —á–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –≤ {next_3am}, –∂–¥–µ–º {time_to_sleep} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(time_to_sleep)

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            await send_backup_db_to_admin(bot)
        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await send_admin_log(bot, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


async def periodic_task_24_hour(bot: Bot):
    # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ (–∫–∞–∫ —É —Ç–µ–±—è)
    await asyncio.sleep(1)

    while True:
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = datetime.now()

        # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ 3:00 –Ω–æ—á–∏
        next_3am = datetime.combine(now.date(), datetime.min.time()) + timedelta(hours=15, minutes=7)

        # –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —É–∂–µ –ø–æ—Å–ª–µ 3:00 –Ω–æ—á–∏, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 3:00
        if now > next_3am:
            next_3am += timedelta(days=1)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 3:00
        time_to_sleep = (next_3am - now).total_seconds()

        # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 3:00
        print(f"–°–ª–µ–¥—É—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ {next_3am}, –∂–¥–µ–º {time_to_sleep} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(time_to_sleep)

        # –ö–æ–≥–¥–∞ –ø—Ä–æ—Å—ã–ø–∞–µ–º—Å—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
        print("–°—Ä–∞–±–æ—Ç–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ 3:00 –Ω–æ—á–∏")
        try:
            # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await send_admin_log(bot, "–ü–∏–Ω–≥ –±–æ—Ç–∞ - –Ω–∞—á–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ 3:00.")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            #await check_db(bot)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await send_admin_log(bot, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")

        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await send_admin_log(bot, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")

        # –ú—ã –Ω–µ –∂–¥–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏, –∞ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ 3:00


async def notify_users_about_protocol_change(bot: Bot):
    errors = {}
    all_chat_id = await UserCl.get_all_users()
    # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ–º —á–∞–Ω–∫–µ)
    batch_size = 50

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —á–∞–Ω–∫–∏
    def chunk_list(lst, size):
        for i in range(0, len(lst), size):
            yield lst[i:i + size]

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for chunk in chunk_list(all_chat_id, batch_size):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞–Ω–∫–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        await asyncio.gather(*[send_initial_update_notification(chat_id, bot, errors) for chat_id in chunk])

    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
    await send_admin_log(bot, f"–ü—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–æ {len(errors)} –æ—à–∏–±–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.")



async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        await send_admin_log(bot, "–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        setup_logger("logs/bot.log")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    await on_startup()

    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return

    db_path = os.getenv('database_path_local')
    if not db_path or not Path(db_path).exists():
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {db_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    print(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")

    await init_db(db_path)

    asyncio.create_task(periodic_task(bot))
    asyncio.create_task(listen_to_redis_queue(bot))
    asyncio.create_task(periodic_backup_task(bot))
    asyncio.create_task(process_task_queue())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_manager = NotificationManager()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_manager.register_notification(
        UnsubscribedNotification(channel_username="pingi_hub")
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_scheduler = NotificationScheduler(notification_manager)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notification_scheduler.add_to_schedule("12:00", "UnsubscribedNotification")

    # –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    asyncio.create_task(notification_scheduler.start(bot))

    dp.message.middleware(ThrottlingMiddleware(rate_limit=1))
    dp.include_router(start.router)
    dp.include_router(support.router)
    dp.include_router(menu_about_pingi.router)
    dp.include_router(user_help_request.router)
    dp.include_router(menu_payment.router)
    dp.include_router(feedback.router)
    dp.include_router(main_menu.router)
    dp.include_router(menu_buy_vpn.router)
    dp.include_router(menu_share.router)
    dp.include_router(menu_help.router)
    dp.include_router(menu_device.router)
    dp.include_router(menu_connect_vpn.router)
    dp.include_router(menu_my_keys.router)
    dp.include_router(notification_migrate_from_wg.router)
    dp.include_router(app_downloaded.router)
    dp.include_router(file_or_qr.router)

    dp.include_router(menu_subscriptoin_check.router)

    try:
        pass
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    except KeyboardInterrupt:
        print("–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        await send_admin_log(bot, "–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∏ –ø–æ—à–µ–ª –æ—Ç–¥—ã—Ö–∞—Ç—å")
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
