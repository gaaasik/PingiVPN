import os
import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bot.admin_func.keyboards import get_service_mode_keyboard
from bot.admin_func.states import AdminStates
from bot.handlers.admin import ADMIN_CHAT_IDS

router = Router()
DB_PATH = os.getenv('database_path_local')

@router.message(F.text == "–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
async def start_user_service_mode(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å)"""
    if message.from_user.id not in ADMIN_CHAT_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    data = await state.get_data()
    last_message_id = data.get("last_message_id")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if last_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    keyboard = await get_service_mode_keyboard()

    sent_message = await message.answer("üîß –í—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(AdminStates.waiting_for_search_method)


# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "cancel_service")
async def handle_cancel_service(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    keyboard = await get_service_mode_keyboard()

    await callback.message.edit_text("üîß –í—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await callback.answer()


# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
@router.callback_query(F.data == "exit_service_mode")
async def exit_service_mode(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—ë)
    main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
    await callback.answer()



# import os

# import logging
#
# from aiogram import Router, types, F
# from aiogram.fsm.context import FSMContext
# from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
# from bot.admin_func.keyboards import get_search_user_keyboard, get_user_service_keyboard, get_service_mode_keyboard
# from bot.admin_func.states import AdminStates
# from bot.admin_func.utils import user_to_json, format_user_data
# from bot.handlers.admin import ADMIN_CHAT_IDS
# from models.UserCl import UserCl
#
# router = Router()
# DB_PATH = os.getenv('database_path_local')
#
# @router.message(F.text == "–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
# async def start_user_service_mode(message: types.Message, state: FSMContext):
#     """–ú–µ–Ω—é —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å)"""
#     if message.from_user.id not in ADMIN_CHAT_IDS:
#         await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     data = await state.get_data()
#     last_message_id = data.get("last_message_id")
#
#     # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì —É–¥–∞–ª—è–µ–º –µ–≥–æ
#     if last_message_id:
#         try:
#             await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
#         except Exception:
#             pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
#
#     keyboard = await get_service_mode_keyboard()
#
#     sent_message = await message.answer("üîß –í—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     await state.update_data(last_message_id=sent_message.message_id)
#     await state.set_state(AdminStates.waiting_for_search_method)
#
# # üìå –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @router.callback_query(F.data == "search_user")
# async def search_user_menu(callback: CallbackQuery, state: FSMContext):
#     """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞"""
#     keyboard =await get_search_user_keyboard()
#
#     await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
#     await callback.answer()
#
#
# # üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ Chat ID
# @router.callback_query(F.data == "search_by_chat_id")
# async def search_by_chat_id(callback: CallbackQuery, state: FSMContext):
#     """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Chat ID"""
#     await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
#     await state.set_state(AdminStates.waiting_for_chat_id)
#     await callback.answer()
#
#
# # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Chat ID (—É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
# @router.message(AdminStates.waiting_for_chat_id)
# async def handle_chat_id_input(message: types.Message, state: FSMContext):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ Chat ID"""
#     try:
#         chat_id = message.text.strip()
#         if not chat_id.isdigit():
#             await message.answer("‚ö†Ô∏è Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             return
#
#         user = await UserCl.load_user(int(chat_id))  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if not user:
#             await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             return
#
#         # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
#         data = await state.get_data()
#         last_message_id = data.get("last_message_id")
#         if last_message_id:
#             try:
#                 await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
#             except Exception:
#                 pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         await state.update_data(current_user=user)
#
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user_json = await user_to_json(user, DB_PATH)
#         formatted_data = await format_user_data(user_json)
#
#         # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
#         keyboard = await get_user_service_keyboard()
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
#         sent_message = await message.answer(
#             f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{formatted_data}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             parse_mode="HTML",
#             reply_markup=keyboard
#         )
#         await state.update_data(last_message_id=sent_message.message_id)
#
#         # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#         await state.set_state(AdminStates.waiting_for_action)
#
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
#         await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
#
#
# # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥"
# @router.callback_query(F.data == "cancel_service")
# async def handle_cancel_service(callback: CallbackQuery, state: FSMContext):
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
#     await state.clear()
#
#     keyboard = await get_service_mode_keyboard()
#
#     await callback.message.edit_text("üîß –í—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
#     await callback.answer()
#
#     # üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "‚ùå –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
#
#
# @router.callback_query(F.data == "exit_service_mode")
# async def exit_service_mode(callback: CallbackQuery, state: FSMContext):
#     """–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
#     await state.clear()
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—ë)
#     main_menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#     ])
#
#     await callback.message.edit_text("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_keyboard)
#     await callback.answer()