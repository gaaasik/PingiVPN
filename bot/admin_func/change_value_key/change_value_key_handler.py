import logging
import os
from datetime import datetime

from aiogram import Router, types, F
from aiogram.types import CallbackQuery, Message, Document, Chat, User
from aiogram.fsm.context import FSMContext

from bot.admin_func.history_key.history_key import handler_my_back_menu
from bot.admin_func.history_key.moving_wg_files import move_in_history_files_wg, validate_conf_file
from bot.admin_func.history_key.moving_wg_files import move_in_history_files_wg, validate_conf_file, generate_qr_code
from bot.admin_func.keyboards import get_key_change_keyboard
from bot.admin_func.searh_user.search_user_handlers import handle_chat_id_input
from bot.admin_func.states import AdminStates
import re

from models.UserCl import UserCl

router = Router()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ VLESS –∫–ª—é—á–∞
VLESS_PATTERN = re.compile(r'vless://[a-f0-9\-]+@[0-9\.]+:\d+\?.*')


@router.callback_query(F.data == "change_to_vless")
async def change_to_vless(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á –Ω–∞ VLESS'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á."""
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π VLESS –∫–ª—é—á:")
    await state.set_state(AdminStates.waiting_for_vless_key)
    await callback.answer()


@router.callback_query(F.data == "change_to_wireguard")
async def change_to_wireguard(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á –Ω–∞ WireGuard'. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    await callback.message.edit_text("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª WireGuard:")
    await state.set_state(AdminStates.waiting_for_wireguard_file)
    await callback.answer()


@router.message(AdminStates.waiting_for_vless_key)
async def process_vless_key(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ VLESS –∫–ª—é—á–∞."""
    data = await state.get_data()
    us: UserCl = data.get("current_user")

    key = message.text.strip()

    if not VLESS_PATTERN.match(key):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VLESS –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á.")
        return

    if us.active_server:
        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
        if await us.active_server.name_protocol.get() == "wireguard":
            logging.info("–ü–µ—Ä–µ–≤–µ–ª —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –≤ history_key")
            await move_in_history_files_wg(us.active_server)
    await us.update_key_to_vless(key)
    await message.answer("‚úÖ –ù–æ–≤—ã–π VLESS –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    # –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ handler_my_back_menu –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å inline-–∫–Ω–æ–ø–∫–∏
    #await router.feed_callback_query(callback=CallbackQuery(id="123", from_user=message.from_user, data="my_back_menu"))

    fake_message = Message(
        message_id=message.message_id,  # –ë–µ—Ä–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        from_user=User(id=message.message_id, is_bot=False, first_name="Admin"),  # –§–µ–π–∫–æ–≤—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        chat=Chat(id=message.chat.id, type="private"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        text=str(us.chat_id),  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ —Ç–µ–∫—Å—Ç
        date=datetime.utcnow()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ date
    )

    # –ü–µ—Ä–µ–¥–∞–µ–º fake_message –≤–º–µ—Å—Ç–æ chat_id
    await handle_chat_id_input(fake_message, state)
    await state.clear()


@router.message(AdminStates.waiting_for_wireguard_file, F.document)
async def process_wireguard_file(message: Message, state: FSMContext):

    """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª WireGuard  update_key_to_wireguard.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (.conf).
    - –ò–∑–≤–ª–µ–∫–∞–µ—Ç server_ip –∏ user_ip.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç).
    - –í—ã–∑—ã–≤–∞–µ—Ç update_key_to_wireguard –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞."""

    try:
        logging.info("üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard")

        data = await state.get_data()
        us: UserCl = data.get("current_user")
        user_login = str(await us.user_login.get())

        if not us:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            logging.error("‚ùå –û—à–∏–±–∫–∞: current_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
            return

        document: Document = message.document

        if not document.file_name.endswith(".conf"):
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .conf")
            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {document.file_name} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ .env
        base_directory = os.getenv("REGISTERED_USERS_DIR")
        if not base_directory:
            logging.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è base_directory_user_files_wg –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º)
        chat_id = str(us.chat_id)
        user_folder = None

        for folder in os.listdir(base_directory):
            if folder.startswith(chat_id):
                user_folder = os.path.join(base_directory, folder)
                break



        if not user_folder:
            user_folder = os.path.join(base_directory, f"{chat_id}_{user_login}")
            os.makedirs(user_folder, exist_ok=True)
            logging.info(f"üìÇ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_folder}")

        if await us.active_server.name_protocol.get() == "wireguard":
            await move_in_history_files_wg(us.active_server)


        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_path = os.path.join(user_folder, "PingiVPN.conf")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await message.bot.get_file(document.file_id)
        await message.bot.download_file(file.file_path, file_path)

        logging.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        server_ip, user_ip = None, None
        with open(file_path, "r", encoding="utf-8") as conf_file:
            conf_content = conf_file.read()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º server_ip (–∏–∑ —Å—Ç—Ä–æ–∫–∏ Endpoint)
            endpoint_match = re.search(r"Endpoint\s*=\s*([\d\.]+):\d+", conf_content)
            if endpoint_match:
                server_ip = endpoint_match.group(1)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º user_ip (–∏–∑ —Å—Ç—Ä–æ–∫–∏ Address)
            address_match = re.search(r"Address\s*=\s*([\d\.]+)", conf_content)
            if address_match:
                user_ip = address_match.group(1)

        if not server_ip or not user_ip:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å server_ip –∏–ª–∏ user_ip –∏–∑ —Ñ–∞–π–ª–∞.")
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ IP –≤ —Ñ–∞–π–ª–µ {file_path}")
            return

        logging.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: server_ip={server_ip}, user_ip={user_ip}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        json_with_wg = {
            "server_ip": server_ip,
            "user_ip": user_ip
        }
        await us.update_key_to_wireguard(json_with_wg)

        # ‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ**
        conf_file_path = os.path.join(user_folder, "PingiVPN.conf")
        qr_code_path = os.path.join(user_folder, "PingiVPN.png")
        generate_qr_code(conf_file_path, qr_code_path)
        logging.info(f"‚úÖ QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: {qr_code_path}")

        await message.answer("‚úÖ WireGuard-–∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        logging.info(f"‚úÖ –ö–ª—é—á WireGuard —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us.chat_id}")

    except Exception as e:
        logging.error(f"üî• –û—à–∏–±–∫–∞ –≤ process_wireguard_file: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ WireGuard.")
