import os
import aiosqlite
from datetime import datetime, timedelta
from typing import Optional
from dotenv import load_dotenv
import logging

from models.UserCl import UserCl

load_dotenv()

DATABASE_PATH = os.getenv("database_path_local")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)

class FriendsManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –¥—Ä—É–∑–µ–π.
    """

    @staticmethod
    async def add_friend(admin_chat_id: int, friend_chat_id: int, friend_username: Optional[str] = None) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥—Ä—É–≥–∞ –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –±—ã–ª–æ 365 –¥–Ω–µ–π.
        """
        now = datetime.now()
        try:
            async with aiosqlite.connect(DATABASE_PATH) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
                async with db.execute(
                        "SELECT id FROM friends WHERE friend_chat_id = ? AND status = 'active'",
                        (friend_chat_id,),
                ) as cursor:
                    if await cursor.fetchone():
                        logging.warning(
                            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {friend_chat_id} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∞–¥–º–∏–Ω–∞ {admin_chat_id}."
                        )
                        return False  # –£–∂–µ –¥—Ä—É–≥

                # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º admin_chat_id
                await db.execute(
                    """
                    INSERT INTO friends (admin_chat_id, friend_chat_id, friend_username, date_added, status)
                    VALUES (?, ?, ?, ?, 'active')
                    """,
                    (admin_chat_id, friend_chat_id, friend_username, now.strftime("%d.%m.%Y %H:%M:%S")),
                )

                await db.commit()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {friend_chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∞–¥–º–∏–Ω–∞ {admin_chat_id}.")

            # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–Ω–µ –±–ª–æ–∫–∞ `async with`
            await FriendsManager._extend_subscription(friend_chat_id, 365)

            return True

        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞ {friend_chat_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_chat_id}: {e}")
            return False

    @staticmethod
    async def is_friend(friend_chat_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—Ä—É–≥–æ–º.
        """
        try:
            async with aiosqlite.connect(DATABASE_PATH) as db:
                async with db.execute(
                    "SELECT id FROM friends WHERE friend_chat_id = ? AND status = 'active'",
                    (friend_chat_id,),
                ) as cursor:
                    is_friend = await cursor.fetchone() is not None

            logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∞ {friend_chat_id}: {'–î–∞' if is_friend else '–ù–µ—Ç'}")
            return is_friend

        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—Ä—É–≥–∞ {friend_chat_id}: {e}")
            return False

    @staticmethod
    async def remove_friend(friend_chat_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –¥—Ä—É–≥–∞ (–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–∞ 'removed') –∏ –æ–±—Ä–µ–∑–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–æ 7 –¥–Ω–µ–π.
        """
        try:
            async with aiosqlite.connect(DATABASE_PATH) as db:
                await db.execute(
                    "UPDATE friends SET status = 'removed' WHERE friend_chat_id = ?", (friend_chat_id,)
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π
                await FriendsManager._extend_subscription(friend_chat_id, 7)

                await db.commit()
                logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {friend_chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π.")
                return True

        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞ {friend_chat_id}: {e}")
            return False

    @staticmethod
    async def _extend_subscription(chat_id: int, target_days: int):
        """
        –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞—Å—Å ServerCl.
        """
        now = datetime.now()

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserCl.load_user(chat_id)
            if not user or not user.active_server:
                logging.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            current_end_date_str = await user.active_server.date_key_off.get()

            try:
                current_end_date = datetime.strptime(current_end_date_str, "%d.%m.%Y %H:%M:%S")
            except ValueError:
                logging.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —É {chat_id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.")
                current_end_date = now

            # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
            days_left = (current_end_date - now).days
            days_to_add = max(target_days - days_left, 0)
            new_end_date = current_end_date + timedelta(days=days_to_add)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ `ServerCl`
            await user.active_server.date_key_off.set(new_end_date.strftime("%d.%m.%Y %H:%M:%S"))

            logging.info(
                f"üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ {chat_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {new_end_date.strftime('%d.%m.%Y %H:%M:%S')} "
                f"(–¥–æ–±–∞–≤–ª–µ–Ω–æ {days_to_add} –¥–Ω–µ–π)"
            )

        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {chat_id}: {e}")

