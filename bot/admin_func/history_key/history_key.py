import logging
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Chat, User, Message

from bot.admin_func.searh_user.search_user_handlers import handle_main_menu_user
from bot.admin_func.searh_user.utils import format_history_key
from bot.admin_func.states import AdminStates
from bot.handlers.admin import send_admin_log
from bot_instance import bot
from models.UserCl import UserCl
from dotenv import load_dotenv

router = Router()
load_dotenv()

############–¢–æ–ª—è–Ω –Ω–∞—á–∞–ª –µ–±–∞—à–∏—Ç—å –∫–Ω–æ–ø–∫–∏     –ó–∞–ø—É—Å—Ç–∏–ª–∞—Å—å —Ñ—É–Ω–∫—Ü–∏—è _______move_in_history_files_wg

def button_back_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu_user")]
        ]
    )
def button_search_by_chat_id_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_by_chat_id")]
        ]
    )


@router.callback_query(lambda c: c.data.startswith("history_key_show_"))
async def handle_history_key_show(callback: CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª—é—á–µ –∏–∑ history_key_list."""
    logging.info("–ó–∞—à–ª–∏ –≤ history_key_show_")

    data = await state.get_data()
    user = data.get("current_user")

    if not user:
        logging.error("–û—à–∏–±–∫–∞: current_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ state.")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=button_search_by_chat_id_keyboard())
        return

    if not user.history_key_list:
        await callback.message.edit_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è –∫–ª—é—á–µ–π –ø—É—Å—Ç–∞.",  reply_markup=button_back_keyboard())
        return

    chat_id = user.chat_id
    us = await UserCl.load_user(chat_id)
    if not us or not us.history_key_list:
        await callback.message.edit_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è –∫–ª—é—á–µ–π –ø—É—Å—Ç–∞.",  reply_markup=button_back_keyboard())
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    index = int(callback.data.split("_")[-1])
    selected_key = us.history_key_list[index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ state
    await state.update_data(selected_history_index=index)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é format_history_key
    key_info = await format_history_key(selected_key, index)
    keyboard = await generate_history_keyboard(us.history_key_list, index)


    await callback.message.edit_text(key_info, reply_markup=keyboard, parse_mode="HTML")
    await state.update_data(last_message_id=key_info.message_id)
    await callback.answer()


async def generate_history_keyboard(history_key_list, selected_index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–ª—é—á–µ–π."""
    buttons = []
    index = 0
    for i, key in enumerate(history_key_list):
        name = await key.name_server.get()
        if i == selected_index:
            index = i
            prefix = "üìç "
        else:
            prefix = ""

        buttons.append([InlineKeyboardButton(text=f"{prefix}{name}", callback_data=f"history_key_show_{i}")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞—Ç—å –∫–ª—é—á –æ—Å–Ω–æ–≤–Ω—ã–º", callback_data=f"change_active_server_{index}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu_user")]) #search_by_chat_id
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# @router.callback_query(F.data == "my_back_menu")
# async def handler_my_back_menu(callback: CallbackQuery, state: FSMContext):
#     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ Chat ID."""
#     logging.info("–ó–∞—à–ª–∏ –≤ my_back_menu")
#
#     data = await state.get_data()
#     user = data.get("current_user")
#
#     await state.update_data(current_user=user)
#     # –ú–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     await state.set_state(AdminStates.main_menu_user)
#     await handle_main_menu_user(callback.message, state)
#     await callback.answer()

@router.callback_query(lambda c: c.data.startswith("change_active_server_"))
async def handler_change_active_server(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        try:
            await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=last_message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    from bot.admin_func.history_key.moving_wg_files import move_in_history_files_wg, move_in_user_files_wg
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ Chat ID."""
    logging.info("–ó–∞–ø—É—Å–∫ change_active_server_")
    data = await state.get_data()
    user = data.get("current_user")
    us = await UserCl.load_user(user.chat_id)
    index = int(callback.data.split("_")[-1])
    if us.active_server:
        old_key = us.active_server
        logging.error(f"—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us.chat_id} –Ω–µ—Ç—É active_server")
    new_key = us.history_key_list[index]
    del us.history_key_list[index]
    await new_key.date_key_off.set(await old_key.date_key_off.get())
    us.history_key_list.append(old_key)
    us.servers.remove(old_key)
    us.servers.append(new_key)
    await us.choosing_working_server()
    logging.info("–ò–∑ history_key_list —É–¥–∞–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–ª—é—á")
    await us.push_field_json_in_db("history_key_list")
    await us.push_field_json_in_db("servers")
    logging.info("–û–±–Ω–æ–≤–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ")
    
    await new_key.enable.set(True)
    await old_key.enable.set(False)
    logging.info("–û—Ç–∫–ª—é—á–∏–ª old_key, –≤–∫–ª—é—á–∏–ª new_key")

    # –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á wireguard, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –µ–≥–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ history_key
    if await old_key.name_protocol.get() == "wireguard":
        await move_in_history_files_wg(old_key)
    # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∫–ª—é—á wireguard, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –µ–≥–æ –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ history_key
    if await new_key.name_protocol.get() == "wireguard":
        await move_in_user_files_wg(new_key)

    await send_admin_log(bot,f"üÜï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.message.chat.id} –∏–∑–º–µ–Ω–∏–ª –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á —É {us.chat_id} c {await old_key.name_protocol.get() if old_key else '$–∫–ª—é—á–∞ –Ω–µ –±—ã–ª–æ$'} –Ω–∞ {await new_key.name_protocol.get()}")
    await callback.message.answer(f"–ò–∑–º–µ–Ω–∏–ª –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id {user.chat_id}.")
    await state.set_state(AdminStates.main_menu_user)
    await state.update_data(current_user=user)
    # –ú–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(AdminStates.main_menu_user)
    await handle_main_menu_user(callback, state)
    await callback.answer()





