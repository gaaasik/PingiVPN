import logging
import os
import shutil
from datetime import datetime
from typing import re

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Chat, User, Message

from bot.admin_func.searh_user.search_user_handlers import handle_chat_id_input
from bot.admin_func.searh_user.utils import format_history_key
from bot.admin_func.states import AdminStates
from models.ServerCl import ServerCl
from models.UserCl import UserCl
from dotenv import load_dotenv

router = Router()
load_dotenv()

############–¢–æ–ª—è–Ω –Ω–∞—á–∞–ª –µ–±–∞—à–∏—Ç—å –∫–Ω–æ–ø–∫–∏


@router.callback_query(lambda c: c.data.startswith("history_key_show_"))
async def handle_history_key_show(callback: CallbackQuery, state: FSMContext):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª—é—á–µ –∏–∑ history_key_list."""
    logging.info("–ó–∞—à–ª–∏ –≤ history_key_show_")

    data = await state.get_data()
    user = data.get("current_user")

    if not user:
        logging.error("–û—à–∏–±–∫–∞: current_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ state.")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not user.history_key_list:
        await callback.message.edit_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è –∫–ª—é—á–µ–π –ø—É—Å—Ç–∞.")
        return

    chat_id = user.chat_id
    us = await UserCl.load_user(chat_id)
    if not us or not us.history_key_list:
        await callback.message.edit_text("‚ùå –ò—Å—Ç–æ—Ä–∏—è –∫–ª—é—á–µ–π –ø—É—Å—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    index = int(callback.data.split("_")[-1])
    selected_key = us.history_key_list[index]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ state
    await state.update_data(selected_history_index=index)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é format_history_key
    key_info = await format_history_key(selected_key, index)
    keyboard = await generate_history_keyboard(us.history_key_list, index)

    await callback.message.edit_text(key_info, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


async def generate_history_keyboard(history_key_list, selected_index):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–ª—é—á–µ–π."""
    buttons = []
    index = 0
    for i, key in enumerate(history_key_list):
        name = await key.name_server.get()
        if i == selected_index:
            index = i
            prefix = "üìç "
        else:
            prefix = ""

        buttons.append([InlineKeyboardButton(text=f"{prefix}{name}", callback_data=f"history_key_show_{i}")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞—Ç—å –∫–ª—é—á –æ—Å–Ω–æ–≤–Ω—ã–º", callback_data=f"change_active_server_{index}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_back_menu")]) #search_by_chat_id
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data == "my_back_menu")
async def my_back_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ Chat ID."""
    logging.info("–ó–∞—à–ª–∏ –≤ my_back_menu")

    data = await state.get_data()
    user = data.get("current_user")
    if not user:
        logging.error("–û—à–∏–±–∫–∞: current_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ state.")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    print("user.chat_id = ", user.chat_id)

    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    fake_message = Message(
        message_id=callback.message.message_id,  # –ë–µ—Ä–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        from_user=User(id=1388513042, is_bot=False, first_name="Admin"),  # –§–µ–π–∫–æ–≤—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        chat=Chat(id=callback.message.chat.id, type="private"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        text=str(user.chat_id),  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ —Ç–µ–∫—Å—Ç
        date=datetime.utcnow()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ date
    )

    # –ü–µ—Ä–µ–¥–∞–µ–º fake_message –≤–º–µ—Å—Ç–æ chat_id
    await handle_chat_id_input(fake_message, state)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("change_active_server_"))
async def handler_change_active_server(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ Chat ID."""
    logging.info("–ó–∞–ø—É—Å–∫ change_active_server_")
    data = await state.get_data()
    user = data.get("current_user")
    us = await UserCl.load_user(user.chat_id)
    index = int(callback.data.split("_")[-1])
    old_key = us.active_server
    new_key = us.history_key_list[index]
    
    print(f"–°–ø–∏—Å–æ–∫ history_key_list –î–û      {us.history_key_list}")
    del us.history_key_list[index]
    await new_key.date_key_off.set(await old_key.date_key_off.get())
    us.history_key_list.append(old_key)
    us.servers.remove(old_key)
    us.servers.append(new_key)
    await us.choosing_working_server()
    logging.info("–ò–∑ history_key_list —É–¥–∞–ª–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–ª—é—á")
    await us.push_field_json_in_db("history_key_list")
    await us.push_field_json_in_db("servers")
    logging.info("–û–±–Ω–æ–≤–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ")
    
    await new_key.enable.set(True)
    await old_key.enable.set(False)
    logging.info("–û—Ç–∫–ª—é—á–∏–ª old_key, –≤–∫–ª—é—á–∏–ª new_key")
    print(f"–°–ø–∏—Å–æ–∫ history_key_list –ü–û–°–õ–ï      {us.history_key_list}")

    # if await new_key.name_protocol.get() == "wireguard":
    #     pass
    #
    # if await old_key.name_protocol.get() == "wireguard":
    #     await move_and_rename_user_files_wg(old_key)


    print(f"date_key_off —É –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ = {await us.active_server.date_key_off.get()}, –∞ –±—ã–ª {await old_key.date_key_off.get()}")
    await callback.message.answer(f"–ò–∑–º–µ–Ω–∏–ª –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id {user.chat_id}.")
    await state.set_state(AdminStates.waiting_for_bonus_days)
    fake_message = Message(
        message_id=callback.message.message_id,  # –ë–µ—Ä–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        from_user=User(id=1388513042, is_bot=False, first_name="Admin"),  # –§–µ–π–∫–æ–≤—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        chat=Chat(id=callback.message.chat.id, type="private"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        text=str(user.chat_id),  # –ü–µ—Ä–µ–¥–∞–µ–º chat_id –∫–∞–∫ —Ç–µ–∫—Å—Ç
        date=datetime.utcnow()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ date
    )

    # –ü–µ—Ä–µ–¥–∞–µ–º fake_message –≤–º–µ—Å—Ç–æ chat_id
    await handle_chat_id_input(fake_message, state)
    await callback.answer()


async def move_and_rename_user_files_wg(old_key: ServerCl):
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã PingiVPN.conf –∏ PingiVPN.png –≤ –ø–∞–ø–∫—É history_key
    –≤–Ω—É—Ç—Ä–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–∑ .env.
    –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ server_ip –∏ user_ip –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    :param old_key: –æ–±—ä–µ–∫—Ç ServerCl, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ .env
        base_directory = os.getenv("base_directory_user_files_wg")
        if not base_directory:
            logging.error("‚ùå –û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è base_directory_user_files_wg –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ old_key
        chat_id = str(old_key.user.chat_id)
        user_login = str(await old_key.user.user_login.get())
        server_ip = str(await old_key.server_ip.get())
        user_ip = str(await old_key.user_ip.get())

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º IP-–∞–¥—Ä–µ—Å–∞ (–∑–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        server_ip_formatted = server_ip.replace(".", "_")
        user_ip_formatted = user_ip.replace(".", "_")

        # –ò—â–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å chat_id
        user_folder = None
        for folder in os.listdir(base_directory):
            if folder.startswith(chat_id):
                user_folder = os.path.join(base_directory, folder)
                break

        if not user_folder:
            logging.warning(f"‚ùå –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º...")
            user_folder = os.path.join(base_directory, f"{chat_id}_unknown")
            os.makedirs(user_folder, exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ history_key, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
        history_folder = os.path.join(user_folder, "history_key")
        os.makedirs(history_folder, exist_ok=True)

        # –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        conf_file = os.path.join(user_folder, "PingiVPN.conf")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è server_ip –∏ user_ip –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if os.path.exists(conf_file):
            with open(conf_file, "r", encoding="utf-8") as file:
                conf_content = file.read()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º Endpoint –∏ Address —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            endpoint_match = re.search(r"Endpoint\s*=\s*([\d\.]+):\d+", conf_content)
            address_match = re.search(r"Address\s*=\s*([\d\.]+)", conf_content)

            if not endpoint_match or not address_match:
                logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å Endpoint –∏–ª–∏ Address –∏–∑ {conf_file}")
                return

            file_server_ip = endpoint_match.group(1)  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ IP
            file_user_ip = address_match.group(1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if file_server_ip != server_ip or file_user_ip != user_ip:
                logging.error(
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ {conf_file}\n"
                    f"  üîπ –û–∂–∏–¥–∞–ª–æ—Å—å: server_ip={server_ip}, user_ip={user_ip}\n"
                    f"  üîπ –í —Ñ–∞–π–ª–µ:  server_ip={file_server_ip}, user_ip={file_user_ip}"
                )
                return
            else:
                logging.info(f"‚úÖ –§–∞–π–ª {conf_file} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É: server_ip –∏ user_ip —Å–æ–≤–ø–∞–¥–∞—é—Ç.")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            new_conf_file = os.path.join(history_folder, f"{server_ip_formatted}-{user_ip_formatted}.conf")
            shutil.move(conf_file, new_conf_file)
            logging.info(f"‚úÖ –§–∞–π–ª {conf_file} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {new_conf_file}")
        else:
            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {conf_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        png_file = os.path.join(user_folder, "PingiVPN.png")
        if os.path.exists(png_file):
            new_png_file = os.path.join(history_folder, f"{server_ip_formatted}-{user_ip_formatted}.png")
            shutil.move(png_file, new_png_file)
            logging.info(f"‚úÖ –§–∞–π–ª {png_file} –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ {new_png_file}")
        else:
            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {png_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    except Exception as e:
        logging.error(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è chat_id {chat_id}: {e}")