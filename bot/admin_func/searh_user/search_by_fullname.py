import os
import logging
from typing import List, Optional

import aiosqlite
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from bot.admin_func.states import AdminStates
from bot.admin_func.searh_user.utils import user_to_json, format_user_data
from models.UserCl import UserCl
from bot.admin_func.keyboards import get_search_user_keyboard, get_user_service_keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π

router = Router()
DB_PATH = os.getenv('database_path_local')


async def get_chat_ids_by_full_name(full_name: str, db_path: str) -> List[tuple]:
    """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏."""
    try:
        async with aiosqlite.connect(db_path) as db:
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            query_exact = "SELECT chat_id, user_name_full, registration_date FROM users WHERE user_name_full = ?"
            async with db.execute(query_exact, (full_name,)) as cursor:
                exact_match = await cursor.fetchone()
                if exact_match:
                    return [exact_match]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É

            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            query_like = "SELECT chat_id, user_name_full, registration_date FROM users WHERE user_name_full LIKE ?"
            async with db.execute(query_like, (f"%{full_name}%",)) as cursor:
                result = await cursor.fetchall()
                return result if result else []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ '{full_name}': {e}")
        return []


@router.callback_query(F.data == "search_by_full_name")
async def search_by_full_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
    ])

    await callback.message.edit_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏):", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_full_name)
    await callback.answer()


@router.message(AdminStates.waiting_for_full_name)
async def handle_full_name_input(message: types.Message, state: FSMContext):
    """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ (–≤–∫–ª—é—á–∞—è —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è) –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç chat_id, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ."""
    full_name = message.text.strip()

    if not full_name:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
        ])
        await message.answer("‚ö†Ô∏è –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard)
        return

    users = await get_chat_ids_by_full_name(full_name, DB_PATH)

    if not users:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
        ])
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
        return

    if len(users) == 1:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
        chat_id = users[0][0]
        try:
            user = await UserCl.load_user(int(chat_id))
            if not user:
                raise ValueError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

            await state.update_data(current_user=user)
            user_json = await user_to_json(user, DB_PATH)
            formatted_data = await format_user_data(user_json)

            keyboard = await get_user_service_keyboard()

            await message.answer(
                f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n{formatted_data}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode="HTML",
                reply_markup=keyboard
            )

            await state.set_state(AdminStates.waiting_for_action)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Chat ID {chat_id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await state.clear()
        return

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ chat_id
    users_list = "üîç <b>–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for idx, (chat_id, name, registration_date) in enumerate(users, start=1):
        users_list += f"<b>{idx}. {name}</b> | ID: <code>{chat_id}</code> | üìÖ: {registration_date}\n"

    users_list += "\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>ID</b> –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
    ])
    await message.answer(users_list, parse_mode="HTML", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_chat_id)