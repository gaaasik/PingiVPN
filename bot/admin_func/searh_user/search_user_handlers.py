import os
import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from bot.admin_func.keyboards import get_search_user_keyboard, get_user_service_keyboard
from bot.admin_func.states import AdminStates
from bot.admin_func.searh_user.utils import user_to_json, format_user_data
from bot_instance import bot


router = Router()
DB_PATH = os.getenv('database_path_local')


# üìå –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "search_user")
async def search_user_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–∏—Å–∫–∞"""
    keyboard = await get_search_user_keyboard()
    await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await callback.answer()



# üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ Chat ID (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥") search_user
@router.callback_query(F.data == "search_by_chat_id")
async def search_by_chat_id(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Chat ID —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
    ])

    await callback.message.edit_text("üî¢ –í–≤–µ–¥–∏—Ç–µ Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)
    await state.set_state(AdminStates.waiting_for_chat_id)
    await callback.answer()


# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Chat ID (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥" –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ)
@router.message(AdminStates.waiting_for_chat_id)
async def handle_chat_id_input(message: types.Message, state: FSMContext):
    from models.UserCl import UserCl
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ Chat ID"""
    try:
        chat_id = message.text.strip()
        if not chat_id.isdigit():
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
            ])
            #await message.answer("‚ö†Ô∏è Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard)
            await bot.send_message(message.chat.id, "‚ö†Ô∏è Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                                   reply_markup=keyboard)
            return

        user = await UserCl.load_user(int(chat_id))  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
            ])
            #await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
            await bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(current_user=user)
        # –ú–µ–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.set_state(AdminStates.main_menu_user)
        await handle_main_menu_user(message, state)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        #await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@router.callback_query(F.data == "main_menu_user")
async def handle_main_menu_user(
    msg_or_cb: types.Message | types.CallbackQuery,
    state: FSMContext
):
    mes_cal = msg_or_cb.message if isinstance(msg_or_cb, types.CallbackQuery) else msg_or_cb
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        try:
            await mes_cal.bot.delete_message(chat_id=mes_cal.chat.id, message_id=last_message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    if isinstance(msg_or_cb, types.CallbackQuery):
        await msg_or_cb.answer()

    data = await state.get_data()
    user = data.get("current_user")

    if not user:
        if isinstance(msg_or_cb, types.CallbackQuery):
            await msg_or_cb.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await msg_or_cb.answer()
        else:
            await msg_or_cb.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    chat_id = msg_or_cb.message.chat.id if isinstance(msg_or_cb, types.CallbackQuery) else msg_or_cb.chat.id
    await show_main_menu(user, chat_id, state)


async def show_main_menu(user, chat_id, state: FSMContext):
    user_json = await user_to_json(user, os.getenv('database_path_local'))
    formatted_data = await format_user_data(user_json)
    keyboard = await get_user_service_keyboard()

    sent_message = await bot.send_message(
        chat_id,
        f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{formatted_data}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(AdminStates.waiting_for_action)

