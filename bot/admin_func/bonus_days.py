import logging
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.admin_func.states import AdminStates
from bot.handlers.admin import send_admin_log
from bot.keyboards.reply import reply_keyboard
from models.UserCl import UserCl

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("admin_actions.log"), logging.StreamHandler()],
)
logger = logging.getLogger(__name__)


# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏"
@router.callback_query(F.data == "add_bonus_days")
async def handle_add_bonus_days(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π."""
    try:
        data = await state.get_data()
        user = data.get("current_user")

        if user and user.servers:
            active_server = user.servers[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
            current_date_key_off = await active_server.date_key_off.get()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ì–∞–ª—è, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞", callback_data="search_user")]
            ])

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π
            await callback.message.answer(
                f"üìÜ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞: {current_date_key_off}\n"
                "üõ† –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π (1-50), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
                reply_markup=keyboard
            )
            await state.set_state(AdminStates.waiting_for_bonus_days)
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º.")

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ö† –û—à–∏–±–∫–∞ –≤ `handle_add_bonus_days`: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π
@router.message(AdminStates.waiting_for_bonus_days)
async def process_bonus_days_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        days_to_add = int(message.text.strip())
        if not (1 <= days_to_add <= 50):
            await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50.")
            return

        data = await state.get_data()
        us = data.get("current_user")

        if not us or not us.servers:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        server = us.active_server

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        current_date_key_off_str = await server.date_key_off.get()
        now = datetime.now()

        try:
            current_date_key_off = datetime.strptime(current_date_key_off_str, "%d.%m.%Y %H:%M:%S")
        except ValueError:
            current_date_key_off = now  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

        # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –∏—Å—Ç–µ–∫, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        new_date_key_off = max(current_date_key_off, now) + timedelta(days=days_to_add)

        formatted_new_date = new_date_key_off.strftime("%d.%m.%Y %H:%M:%S")
        await server.date_key_off.set(formatted_new_date)

        # üîπ –í–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω
        if not await server.enable.get():
            await server.enable.set(True)
            logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {us.chat_id} –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

        # üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_log_message = (
            f"‚úÖ <b>–ê–¥–º–∏–Ω {message.from_user.full_name} –¥–æ–±–∞–≤–∏–ª {days_to_add} –¥–Ω–µ–π</b>\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {us.chat_id}\n"
            f"üìÜ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {formatted_new_date}\n"
            f"üîò <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if await server.enable.get() else '–û—Ç–∫–ª—é—á–µ–Ω'}"
        )
        await send_admin_log(bot=message.bot, message=admin_log_message)

        # üîî –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        user_message = (
            f"üéÅ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{days_to_add} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π!</b>\n"
            f"üìÖ <b>–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:</b> {formatted_new_date}."
        )
        if await server.enable.get():
            user_message += "\n‚ö° –í–∞—à –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."

        try:
            await message.bot.send_message(chat_id=us.chat_id, text=user_message, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us.chat_id}: {e}")
            await send_admin_log(message.bot, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {us.chat_id}")

        await state.clear()

    except ValueError:
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ `process_bonus_days_input`: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
