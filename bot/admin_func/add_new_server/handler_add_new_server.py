
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

import asyncio

from bot.admin_func.states import AdminStates

router = Router()

# ---------- –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ----------
@router.callback_query(F.data == "add_new_server")
async def start_add_server(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="VLESS", callback_data="server_type_vless")],
            [InlineKeyboardButton(text="WireGuard", callback_data="server_type_wireguard")]
        ])
    )
    await state.set_state(AdminStates.choosing_server_type)
    await callback.answer()

# ---------- –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–µ—Ä–≤–µ—Ä–∞ ----------
@router.callback_query(F.data.in_(["server_type_vless", "server_type_wireguard"]))
async def choose_server_type(callback: CallbackQuery, state: FSMContext):
    server_type = callback.data.replace("server_type_", "")
    await state.update_data(server_type=server_type)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:")
    await state.set_state(AdminStates.waiting_ip)
    await callback.answer()

# ---------- –í–≤–æ–¥ IP –∞–¥—Ä–µ—Å–∞ ----------
@router.message(AdminStates.waiting_ip)
async def input_server_ip(message: Message, state: FSMContext):
    ip_address = message.text.strip()

    if len(ip_address.split(".")) != 4:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.")

        return

    await state.update_data(ip_address=ip_address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å root –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:")
    await state.set_state(AdminStates.waiting_password)


# ---------- –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è ----------
@router.message(AdminStates.waiting_password)
async def input_server_password(message: Message, state: FSMContext):
    password = message.text.strip()
    await state.update_data(password=password)

    await message.answer(
        "üí° –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_add_server")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_add_server")]
        ])
    )




# ---------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ ----------
@router.callback_query(F.data == "confirm_add_server")
async def confirm_add_server(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ip_address = data.get("ip_address")
    password = data.get("password")
    server_type = data.get("server_type")

    await callback.message.answer(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {ip_address}...")

    await state.set_state(AdminStates.processing)

    try:
        pass
        #await process_server_setup(ip_address, password, server_type, callback.message)
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    finally:
        await state.clear()


@router.callback_query(F.data == "cancel_add_server")
async def cancel_add_server(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

