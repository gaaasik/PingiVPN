import asyncio
import json
import redis.asyncio as redis
from logging_config.my_logging import my_logging
from task_processor.server_settings import ServerSettings
from task_processor.task_manager import TaskManager

async def notify_server_rebooted():
    redis_client = await ServerSettings.get_redis_client()
    result = {
        "status": "alive",
        "task_type": "result_update_and_reboot_server",
        "server_name": ServerSettings.SERVER_NAME,
        "server_ip": ServerSettings.SERVER_IP,
    }
    await redis_client.lpush(ServerSettings.NAME_RESULT_QUEUE, json.dumps(result))
    my_logging.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result}")

async def process_tasks():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ Redis –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ."""
    await ServerSettings.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏

    redis_client = await ServerSettings.get_redis_client()
    task_manager = TaskManager()
    name_task_queue = ServerSettings.NAME_TASK_QUEUE

    await notify_server_rebooted()
    my_logging.info(f"–°–ª—É—à–∞—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á: {name_task_queue}")

    while True:
        try:
            task_data = await redis_client.blpop(name_task_queue, timeout=0)
            if task_data:
                _, task_data = task_data
                task_json = json.loads(task_data)
                my_logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–∑ Redis: {task_json}")
                await task_manager.process_task(task_json)
        except redis.ConnectionError as e:
            my_logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)
            continue
        except Exception as e:
            my_logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    await process_tasks()


if __name__ == "__main__":
    asyncio.run(main())
