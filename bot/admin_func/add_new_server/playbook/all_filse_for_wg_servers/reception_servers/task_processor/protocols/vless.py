import asyncio
import base64
import json
import secrets
import string
import subprocess
import uuid
from datetime import time
import random
from typing import Dict, Optional
from uuid import uuid4
from cryptography.hazmat.primitives.asymmetric import x25519
from cryptography.hazmat.primitives import serialization
import aiohttp
import aiosqlite

from logging_config.my_logging import my_logging
from task_processor.server_settings import ServerSettings
from task_processor.protocols.base_class import VPNProcessor


#from main import ServerSettings


class VlessProcessor(VPNProcessor):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –¥–ª—è VLESS."""

    async def process_change_enable_user(self, task_data: Dict):
        my_logging.info(f"VLESS: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task_data}")
        uuid_value = task_data["uuid_value"]
        enable = task_data["enable"]
        chat_id = task_data["chat_id"]
        enable_now = await self.get_user_enable_status(uuid_value)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = await aiosqlite.connect(ServerSettings.PATH_DATABASE_X_UI)

        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ UUID
            async with db.execute("SELECT id, settings FROM inbounds WHERE protocol = 'vless'") as cursor:
                user_found = None
                async for inbound in cursor:
                    inbound_id, settings = inbound
                    settings_json = json.loads(settings)
                    for client in settings_json.get("clients", []):
                        if client.get("id") == uuid_value:
                            user_found = (inbound_id, settings_json, client)
                            break

            if not user_found:
                my_logging.warning(f"VLESS: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UUID {uuid_value} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä "enable"
            inbound_id, settings_json, client = user_found
            client["enable"] = enable
            updated_settings = json.dumps(settings_json)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.execute("UPDATE inbounds SET settings = ? WHERE id = ?", (updated_settings, inbound_id))
            await db.commit()
            my_logging.info(
                f"VLESS: –ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uuid_value}: {'–í–∫–ª—é—á–µ–Ω' if enable else '–í—ã–∫–ª—é—á–µ–Ω'}")

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å
            traffic_info = await self.get_user_traffic(uuid_value)
            enable_status = await self.get_user_enable_status(uuid_value)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "status": "success",
                "task_type": "result_change_enable_user",
                "chat_id": chat_id,
                "protocol": "vless",
                "enable": enable_status,
                "traffic": traffic_info,
                "uuid_value": uuid_value,
                "action": "enabled" if enable_status else "disabled"
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            redis_client = await ServerSettings.get_redis_client()
            await redis_client.lpush(ServerSettings.NAME_RESULT_QUEUE, json.dumps(result))
            my_logging.info(
                f"VLESS: –ó–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å {ServerSettings.NAME_RESULT_QUEUE}: {result}")

            if enable != enable_now:
                await VlessProcessor.restart_x_ui()

        except Exception as e:
            error_msg = f"VLESS: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uuid_value}: {e}"
            my_logging.error(error_msg)
            redis_client = await ServerSettings.get_redis_client()
            await redis_client.lpush(ServerSettings.NAME_RESULT_QUEUE,
                                     json.dumps({"status": "error", "message": error_msg}))
        finally:
            await db.close()

    async def get_user_traffic(self, uuid_value: str) -> Dict:
        return {"transfer_received": "0", "transfer_sent": "0"}  # –ó–∞–≥–ª—É—à–∫–∞

    async def get_user_enable_status(self, uuid_value: str) -> bool:
        try:
            async with aiosqlite.connect(ServerSettings.PATH_DATABASE_X_UI) as db:
                async with db.execute("SELECT settings FROM inbounds WHERE protocol = 'vless'") as cursor:
                    async for inbound in cursor:
                        settings_json = json.loads(inbound[0])
                        for client in settings_json.get("clients", []):
                            if client.get("id") == uuid_value:
                                return client.get("enable", False)
        except Exception as e:
            my_logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VLESS: {e}")
        return False

    async def get_count_true_user(self) -> int:
        """
        üìä –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ VLESS-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å enabled=True.
        """
        try:
            count = 0
            async with aiosqlite.connect(ServerSettings.PATH_DATABASE_X_UI) as db:
                async with db.execute("SELECT settings FROM inbounds WHERE protocol = 'vless'") as cursor:
                    async for row in cursor:
                        try:
                            settings_json = json.loads(row[0])
                            clients = settings_json.get("clients", [])
                            count += sum(1 for c in clients if c.get("enable") is True)
                        except Exception as parse_err:
                            my_logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ settings JSON: {parse_err}")
                            continue

            my_logging.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö VLESS-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")
            return count
        except Exception as e:
            my_logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö VLESS-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return 0

    async def process_delete_user(self, task_data: Dict):
        """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VLESS –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö x-ui –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü."""
        db_path = ServerSettings.PATH_DATABASE_X_UI
        uuid_id = task_data["uuid_id"]
        email_key = task_data["email_key"]
        chat_id = task_data["chat_id"]

        try:
            async with aiosqlite.connect(db_path) as db:
                my_logging.info(f"–ù–∞—á–∞—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: UUID={uuid_id}, Email={email_key}")

                # 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É inbounds (—É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ settings)
                user_found = False
                async with db.execute("SELECT id, settings FROM inbounds WHERE protocol = 'vless'") as cursor:
                    async for inbound in cursor:
                        inbound_id, settings = inbound
                        try:
                            settings_json = json.loads(settings)
                        except json.JSONDecodeError as json_err:
                            my_logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ settings JSON: {json_err}")
                            continue

                        original_clients = settings_json.get("clients", [])
                        updated_clients = [c for c in original_clients if c.get("id") != uuid_id]

                        if len(original_clients) != len(updated_clients):
                            settings_json["clients"] = updated_clients
                            updated_settings = json.dumps(settings_json)

                            await db.execute(
                                "UPDATE inbounds SET settings = ? WHERE id = ?",
                                (updated_settings, inbound_id)
                            )
                            user_found = True

                # 2Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ client_traffics
                result_traffic = await db.execute(
                    "DELETE FROM client_traffics WHERE email = ?",
                    (email_key,)
                )

                # 3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ users
                result_user = await db.execute(
                    "DELETE FROM users WHERE username = ?",
                    (email_key,)
                )

                # 4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                try:
                    await db.commit()
                except Exception as commit_error:
                    my_logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {commit_error}")

                # 5Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤ Redis
                redis_client = await ServerSettings.get_redis_client()
                result_status = "success" if user_found else "not_found"

                result = {
                    "status": result_status,
                    "task_type": "result_delete_user",
                    "chat_id": chat_id,
                    "protocol": "vless",
                    "uuid_id": uuid_id,
                    "action": "deleted" if user_found else "user_not_found"
                }

                await redis_client.lpush(ServerSettings.NAME_RESULT_QUEUE, json.dumps(result))
                my_logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uuid_id}: {e}"
            my_logging.error(error_msg)
            redis_client = await ServerSettings.get_redis_client()
            await redis_client.lpush(ServerSettings.NAME_RESULT_QUEUE, json.dumps({
                "status": "error",
                "message": error_msg
            }))

    @staticmethod
    async def restart_x_ui():
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ 3x-ui —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã systemctl.
        """
        try:
            subprocess.run(["sudo", "systemctl", "restart", "x-ui"], check=True)
            my_logging.info(" –°–µ—Ä–≤–∏—Å 3x-ui —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ systemctl.")
        except subprocess.CalledProcessError as e:
            my_logging.error(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ 3x-ui —á–µ—Ä–µ–∑ systemctl: {e}")

        # üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –≤—ã–∑–æ–≤ API x-ui –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

    @staticmethod
    async def generate_vless_username(db) -> Optional[str]:
        """
        üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VLESS –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        PingiVPN_<—á–∏—Å–ª–æ>_<—Å—Ç—Ä–∞–Ω–∞>, –Ω–∞—á–∏–Ω–∞—è —Å server_number, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–∞—Ä—É—à–µ–Ω.

        :param server_ip: IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞.
        :param db: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        :return: –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            # üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–µ
            server_ip = ServerSettings.SERVER_IP
            server_name = ServerSettings.SERVER_NAME
            country = ServerSettings.SERVER_COUNTRY

            my_logging.info(f"server_info: {server_ip}, {server_name}, {country}")

            if not country:
                my_logging.error(f"–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ server_info.")
                return None

            my_logging.info(f"–°—Ç—Ä–∞–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞: {country}")
            my_logging.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {server_name}")

            # üìè –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            parts = server_name.split("_")
            numbers = [word for word in parts if word.isdigit()]
            server_number = sum(int(word) for word in numbers) if numbers else 99000  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            my_logging.info(f"–ò—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ —Å–µ—Ä–≤–µ—Ä–∞: {server_number}")

            # üèÉ‚Äç‚ôÇÔ∏è –°–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ inbounds.settings
            existing_numbers = set()
            async with db.execute("SELECT settings FROM inbounds WHERE protocol = 'vless'") as cursor:
                async for row in cursor:
                    settings_json = json.loads(row[0])
                    clients = settings_json.get("clients", [])
                    for client in clients:
                        email = client.get("email", "")
                        if email.startswith("PingiVPN_") and email.endswith(f"_{country}"):
                            try:
                                num_part = int(email.split("_")[1])
                                existing_numbers.add(num_part)
                            except (ValueError, IndexError):
                                continue

            # üìå –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –≤ client_traffics
            async def email_exists(email_key: str) -> bool:
                async with db.execute("SELECT 1 FROM client_traffics WHERE email = ?", (email_key,)) as cursor:
                    return await cursor.fetchone() is not None

            # üîÑ –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            for num in range(server_number, server_number + 100):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 100 –Ω–æ–º–µ—Ä–æ–≤
                if num not in existing_numbers:
                    email_key = f"PingiVPN_{num}_{country}"
                    if not await email_exists(email_key):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ client_traffics
                        my_logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {email_key}")
                        return email_key

            # üèó –ï—Å–ª–∏ –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–Ω—è—Ç—ã ‚Äî –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä
            next_number = max(existing_numbers, default=server_number - 1) + 1
            email_key = f"PingiVPN_{next_number}_{country}"
            if await email_exists(email_key):
                my_logging.error(f"‚ùå –û—à–∏–±–∫–∞: –¥–∞–∂–µ next_number {next_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return None

            my_logging.info(f"‚úÖ –í—Å–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–Ω—è—Ç—ã. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è: {email_key}")
            return email_key

        except Exception as e:
            my_logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None

    @staticmethod
    def generate_vless_url(server_ip, uuid_id, public_key, sni, sid, email_key, port=443):
        """
        üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VLESS URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        """
        return (
            f"vless://{uuid_id}@{server_ip}:{port}?type=tcp&security=reality&"
            f"pbk={public_key}&fp=chrome&sni={sni}&sid={sid}&spx=%2F&flow=xtls-rprx-vision#{email_key}"
        )

    @staticmethod
    def sort_clients_by_name_and_number(clients):
        """
        üèÉ‚Äç‚ôÇÔ∏è –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:
        - –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –æ–±—ã—á–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–Ω–µ –Ω–∞—á–∏–Ω–∞—é—â–∏–º–∏—Å—è —Å PingiVPN_)
        - –ó–∞—Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ PingiVPN_ –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–æ–º–µ—Ä–∞
        """
        def sort_key(client):
            email = client.get("email", "")
            if email.startswith("PingiVPN_"):
                try:
                    return (1, int(email.split("_")[1]))  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∏—Å–ª—É –¥–ª—è PingiVPN_
                except (IndexError, ValueError):
                    return 1, float("inf")
            return 0, email  # –û–±—ã—á–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ

        return sorted(clients, key=sort_key)

    async def creating_user(self, task_data: Dict, count_users=3):
        """
        üèó –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VLESS —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º, –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π subId –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∫–ª–∏–µ–Ω—Ç–æ–≤.
        """
        db_path = ServerSettings.PATH_DATABASE_X_UI
        server_ip = ServerSettings.SERVER_IP
        server_name = ServerSettings.SERVER_NAME
        flow = "xtls-rprx-vision"

        created_users = []
        all_urls = []

        try:
            async with aiosqlite.connect(db_path) as db:
                my_logging.info(f"üöÄ –ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ {count_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: {server_ip}")

                # 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É inbounds (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ clients)
                async with db.execute("SELECT id, stream_settings FROM inbounds WHERE protocol = 'vless'") as cursor:
                    async for row in cursor:
                        try:
                            inbound_id, stream_settings_json = row
                            stream_settings_json = json.loads(stream_settings_json)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
                            reality_settings = stream_settings_json.get("realitySettings", {})

                            public_key = reality_settings.get("settings", {}).get("publicKey", "")
                            sni = reality_settings.get("serverNames", [""])[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä
                            sid = reality_settings.get("shortIds", [""])[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π shortId
                            fingerprint = reality_settings.get("settings", {}).get("fingerprint", "chrome")
                            spx = reality_settings.get("settings", {}).get("spiderX", "/")
                        except json.JSONDecodeError as json_err:
                            my_logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON: {json_err}")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        async with db.execute("SELECT id, settings FROM inbounds WHERE id = ?",
                                              (inbound_id,)) as settings_cursor:
                            async for settings_row in settings_cursor:
                                _, settings_json = settings_row
                                settings_json = json.loads(settings_json)
                                settings_json.setdefault("clients", [])  # ‚úÖ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å clients

                        # ‚ö° –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        for _ in range(count_users):
                            uuid_id = str(uuid4())  # üõ° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                            # üìå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ generate_vless_username() —Å –ø–µ—Ä–µ–¥–∞—á–µ–π db –∏ server_ip
                            email_key = await self.generate_vless_username(db)
                            subId = str(uuid4()).replace("-", "")[0:16]
                            url_vless = self.generate_vless_url(server_ip, uuid_id, public_key, sni, sid, email_key)
                            if not email_key or not url_vless or not subId or not flow or not url_vless or not server_ip:
                                my_logging.error(f"–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä")
                                continue
                            # ‚ö° –°–æ–∑–¥–∞–µ–º json –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            new_client = {
                                "email": email_key,
                                "enable": True,
                                "expiryTime": 0,
                                "flow": flow,
                                "id": uuid_id,
                                "limitIp": 0,
                                "reset": 0,
                                "subId": subId,
                                "tgId": "",
                                "totalGB": 0
                            }
                            settings_json["clients"].append(new_client)

                            # üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
                            created_users.append({
                                "uuid_id": uuid_id,
                                "email_key": email_key,
                                "subId": subId,
                                "url": url_vless
                            })
                            all_urls.append(url_vless)

                            # 2Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ client_traffics
                            await db.execute(
                                "INSERT INTO client_traffics (inbound_id, enable, email, up, down, expiry_time, total, reset)"
                                " VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                                (inbound_id, 1, email_key, 0, 0, 0, 0, 0)
                            )

                        # üèÉ‚Äç‚ôÇÔ∏è –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤:
                        settings_json["clients"] = self.sort_clients_by_name_and_number(settings_json["clients"])

                        updated_settings = json.dumps(settings_json)
                        await db.execute(
                            "UPDATE inbounds SET settings = ? WHERE id = ?",
                            (updated_settings, inbound_id)
                        )
                        my_logging.info(f"‚úÖ {count_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ inbounds.")

                # 3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                await db.commit()
                #await VlessProcessor.add_client_traffic(inbound_id, email_key)
                my_logging.info("üéØ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")

                # 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Redis
                redis_client = await ServerSettings.get_redis_client()
                result = {
                    "status": "success",
                    "server_id": server_ip,
                    "server_name": server_name,
                    "task_type": "result_create_user",
                    "protocol": "vless",
                    "count_users": len(created_users),
                    "all_urls": all_urls,
                    "action": "created_batch"
                }
                await redis_client.lpush(ServerSettings.NAME_RESULT_QUEUE, json.dumps(result))
                await asyncio.sleep(2)  # ‚è±Ô∏è –î–∞—ë–º Redis –∏ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å
                await self.restart_x_ui()  # üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ 3x-ui
                my_logging.info(f"–°–æ–∑–¥–∞–Ω–∏–µ {count_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {e}"
            my_logging.error(error_msg)
            redis_client = await ServerSettings.get_redis_client()
            await redis_client.lpush(ServerSettings.NAME_RESULT_QUEUE, json.dumps({
                "status": "error",
                "server_id": server_ip,
                "server_name": server_name,
                "task_type": "result_create_user",
                "error_msg": error_msg
            }))

    @staticmethod
    async def add_client_traffic(inbound_id, email_key):
        try:
            my_logging.info("üåÄ –í—Ö–æ–¥ –≤ add_client_traffic")
            db_path = ServerSettings.PATH_DATABASE_X_UI

            async with aiosqlite.connect(db_path) as db:
                my_logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –≤ client_traffics")

                # 1Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∂–µ email
                await db.execute(
                    "DELETE FROM client_traffics WHERE email = ?",
                    (email_key,)
                )
                my_logging.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å —Å email = {email_key} (–µ—Å–ª–∏ –±—ã–ª–∞)")

                # 2Ô∏è‚É£ –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                await db.execute(
                    """
                    INSERT INTO client_traffics (
                        inbound_id, enable, email, up, down, expiry_time, total, reset
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """,
                    (inbound_id, 1, email_key, 0, 0, 0, 0, 0)
                )
                await db.commit()
                my_logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è email = {email_key}")

        except Exception as e:
            my_logging.error(f"–û—à–∏–±–∫–∞ –≤ add_client_traffic: {e}")

    @staticmethod
    def generate_reality_keys():
        private_key_obj = x25519.X25519PrivateKey.generate()
        public_key_obj = private_key_obj.public_key()

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ "—Å—ã—Ä–æ–º" –≤–∏–¥–µ (raw) –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64url –±–µ–∑ –ø–∞–¥–¥–∏–Ω–≥–∞
        private_key = base64.urlsafe_b64encode(
            private_key_obj.private_bytes(
                encoding=serialization.Encoding.Raw,
                format=serialization.PrivateFormat.Raw,
                encryption_algorithm=serialization.NoEncryption()
            )
        ).decode().rstrip("=")

        public_key = base64.urlsafe_b64encode(
            public_key_obj.public_bytes(
                encoding=serialization.Encoding.Raw,
                format=serialization.PublicFormat.Raw
            )
        ).decode().rstrip("=")

        return private_key, public_key

    @staticmethod
    def generate_short_ids() -> list[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 8 shortIds —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–ª–∏–Ω, –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ.
        """
        lengths = [4, 6, 8, 10, 12, 14, 16]
        short_ids = []

        for _ in range(8):
            length = random.choice(lengths)
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è hex-—Å—Ç—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã (–≤ –±–∞–π—Ç–∞—Ö)
            short_id = secrets.token_hex(length // 2)
            short_ids.append(short_id)

        return short_ids

    @staticmethod
    async def create_xui_inbound_from_task():
        user_uuid = str(uuid.uuid4())
        user_subid = ''.join(random.choices(string.ascii_lowercase + string.digits, k=16))
        short_ids = VlessProcessor.generate_short_ids()
        private_key, public_key = VlessProcessor.generate_reality_keys()

        inbound_data = {
            "remark": "",
            "tag": "inbound-443",
            "settings": {
                "clients": [{
                    "comment": "",
                    "email": "test",
                    "enable": True,
                    "expiryTime": 0,
                    "flow": "xtls-rprx-vision",
                    "id": user_uuid,
                    "limitIp": 0,
                    "reset": 0,
                    "subId": user_subid,
                    "tgId": "",
                    "totalGB": 0,
                }],
                "decryption": "none",
                "fallbacks": []
            },
            "stream_settings": {
                "externalProxy": [],
                "network": "tcp",
                "realitySettings": {
                    "dest": "google.com:443",
                    "maxClient": "",
                    "maxTimediff": 0,
                    "minClient": "",
                    "privateKey": private_key,
                    "serverNames": [
                        "google.com",
                        "www.google.com"
                    ],
                    "settings": {
                        "fingerprint": "chrome",
                        "publicKey": public_key,
                        "serverName": "",
                        "spiderX": "/"
                    },
                    "shortIds": short_ids,
                    "show": False,
                    "xver": 0
                },
                "security": "reality",
                "tcpSettings": {
                    "acceptProxyProtocol": False,
                    "header": {
                        "type": "none"
                    }
                }
            },

            "sniffing": {
                "enabled": False,
                "metadataOnly": False,
                "routeOnly": False,
                "destOverride": ["http", "tls", "quic", "fakedns"]
            },
            "allocate": {
                "strategy": "always",
                "refresh": 5,
                "concurrency": 3
            }
        }

        await VlessProcessor.write_to_x_ui_database(inbound_data)

    @staticmethod
    async def write_to_x_ui_database(inbound_data: dict):
        db_path = ServerSettings.PATH_DATABASE_X_UI
        email = inbound_data["settings"]["clients"][0]["email"]
        query = """
        INSERT INTO inbounds (
            user_id, up, down, total, remark, enable, expiry_time, listen, port, protocol,
            settings, stream_settings, tag, sniffing, allocate
        ) VALUES (
            1, 0, 0, 0, ?, 1, 0, '', 443, 'vless',
            ?, ?, ?, ?, ?
        );
        """
        async with aiosqlite.connect(db_path) as db:
            await db.execute(query, (
                inbound_data["remark"],
                json.dumps(inbound_data["settings"], separators=(',', ':')),
                json.dumps(inbound_data["stream_settings"], separators=(',', ':')),
                inbound_data["tag"],
                json.dumps(inbound_data["sniffing"], separators=(',', ':')),
                json.dumps(inbound_data["allocate"], separators=(',', ':'))
            ))
            await db.commit()  # ‚úÖ —Ç–µ–ø–µ—Ä—å –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

        # –ü–æ—Å–ª–µ commit ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ client_traffics
        await VlessProcessor.add_client_traffic(1, email)