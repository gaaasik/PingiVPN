
import os
from aiogram import Router, F, types
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from communication_with_servers.send_type_task import send_creating_user_tasks_for_servers, \
    send_update_and_reboot_server
from models.country_server_data import get_json_country_server_data

router = Router()
PAGE_SIZE = 6  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É


# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–Ω–∞—Å—Ç—Ä–æ–µ–∫
async def get_admin_settings_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="view_all_servers")],
        [InlineKeyboardButton(text="‚ôªÔ∏è –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π", callback_data="confirm:regenerate_all")],
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="confirm:reboot_all")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
    ])

async def get_back_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="search_user")]
    ])


@router.callback_query(F.data == "admin_settings")
async def admin_settings_menu(callback: CallbackQuery, state: FSMContext):
    keyboard = await get_admin_settings_keyboard()
    await callback.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
    await callback.answer()


# üìå –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º)
@router.callback_query(F.data == "view_all_servers")
async def show_server_list(callback: CallbackQuery, state: FSMContext):
    await state.update_data(selected_servers=set(), server_page=0)
    await send_server_page(callback.message, state)
    await callback.answer()


# üìå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
@router.callback_query(F.data.startswith("page:"))
async def handle_page_change(callback: CallbackQuery, state: FSMContext):
    new_page = int(callback.data.split(":")[1])
    data = await state.get_data()
    await state.update_data(server_page=new_page)
    await send_server_page(callback.message, state, data.get("selected_servers", set()))
    await callback.answer()


# üìå –¢–æ–≥–≥–ª –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
@router.callback_query(F.data.startswith("toggle:"))
async def toggle_server_selection(callback: CallbackQuery, state: FSMContext):
    _, ip, page = callback.data.split(":")
    data = await state.get_data()
    selected = set(data.get("selected_servers", set()))
    if ip in selected:
        selected.remove(ip)
    else:
        selected.add(ip)
    await state.update_data(selected_servers=selected, server_page=int(page))
    await send_server_page(callback.message, state, selected)
    await callback.answer()


# üìå –î–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
@router.callback_query(F.data.startswith("action:"))
async def handle_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    data = await state.get_data()
    selected = data.get("selected_servers", set())
    targets = list(selected) if selected else None

    if not targets:
        await callback.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã", show_alert=True)
        return

    if action == "regenerate":

        await callback.message.edit_text("üõ† –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –∑–∞–ø—É—â–µ–Ω–∞...")
        await send_creating_user_tasks_for_servers(targets)
        keyboard = await get_back_keyboard()
        await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=keyboard)

    elif action == "reboot":
        await send_update_and_reboot_server(targets)
        keyboard = await get_back_keyboard()
        await callback.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=keyboard)
        # –¢—É—Ç –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∂–µ
    await callback.answer()


@router.callback_query(F.data.startswith("confirm:"))
async def confirm_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1].replace("_all", "")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"do:{action}_all")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_settings")]
    ])
    text_map = {
        "regenerate": "‚ôªÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π –Ω–∞ <b>–≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞</b>?",
        "reboot": "üîÑ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å <b>–≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞</b>?"
    }
    await callback.message.edit_text(text_map.get(action, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."), parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("do:"))
async def do_confirmed_action(callback: CallbackQuery):
    action = callback.data.split(":")[1].replace("_all", "")

    if action == "regenerate":
        await send_creating_user_tasks_for_servers()
        result_text = "‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞."

    elif action == "reboot":
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        await send_update_and_reboot_server()
        result_text = "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤."

    else:
        result_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."

    keyboard = await get_back_keyboard()
    await callback.message.edit_text(result_text, reply_markup=keyboard)
    await callback.answer()


# üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ—Ä–≤–µ—Ä–æ–≤
async def send_server_page(message: types.Message, state: FSMContext, selected: set = None):
    if selected is None:
        data = await state.get_data()
        selected = set(data.get("selected_servers", set()))
        page = data.get("server_page", 0)
    else:
        page = (await state.get_data()).get("server_page", 0)

    servers_data = (await get_json_country_server_data())["servers"]
    total = len(servers_data)
    start = page * PAGE_SIZE
    end = min(start + PAGE_SIZE, total)
    current_page = servers_data[start:end]

    inline_keyboard = []

    for srv in current_page:
        ip = srv["address"]
        name = srv["name"]
        checked = "‚úÖ " if ip in selected else ""
        button = InlineKeyboardButton(
            text=f"{checked}{name}",
            callback_data=f"toggle:{ip}:{page}"
        )
        inline_keyboard.append([button])

    pagination = []
    if page > 0:
        pagination.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{page-1}"))
    if end < total:
        pagination.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page:{page+1}"))
    if pagination:
        inline_keyboard.append(pagination)

    inline_keyboard.append([
        InlineKeyboardButton(text="‚ôªÔ∏è –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", callback_data="action:regenerate"),
        InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", callback_data="action:reboot")
    ])

    inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")
    ])

    markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await message.edit_text("üåê –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:", reply_markup=markup)
