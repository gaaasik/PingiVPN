import logging
from aiogram import Router, types, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
from datetime import datetime

from bot.admin_func.keyboards import get_statistics_keyboard
from bot.handlers.admin import ADMIN_CHAT_IDS
from models.daily_task_class.statistics_generator import generate_statistic_text

router = Router()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class StatisticStates(StatesGroup):
    waiting_for_stat_date = State()


@router.callback_query(F.data == "show_statistics")
async def show_statistic_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É".
    """
    if callback.from_user.id not in ADMIN_CHAT_IDS:
        await callback.message.edit_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        await callback.answer()
        return

    try:
        stats_message = await generate_statistic_text()

        if not stats_message.strip():
            stats_message = "‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞."

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        stats_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n<code>{str(e)}</code>"

    keyboard = await get_statistics_keyboard()
    await callback.message.edit_text(stats_message, reply_markup=keyboard, parse_mode="HTML")

    await callback.answer()
@router.callback_query(F.data == "choose_stat_date")
async def choose_stat_date(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    await callback.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>02.03.2025</code>):",
                                     parse_mode="HTML")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(StatisticStates.waiting_for_stat_date)

    await callback.answer()


@router.message(StatisticStates.waiting_for_stat_date)
async def process_stat_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    """
    try:
        selected_date = datetime.strptime(message.text.strip(), "%d.%m.%Y")  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì

        stats_message = await generate_statistic_text(selected_date)

        keyboard = await get_statistics_keyboard()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ
        await message.answer(stats_message, reply_markup=keyboard, parse_mode="HTML")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>.", parse_mode="HTML")

    await state.clear()
