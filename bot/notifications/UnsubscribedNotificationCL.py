import asyncio
import os
from datetime import datetime
from bot_instance import bot
from models.UserCl import UserCl
from .NotificationBaseCL import NotificationBase
from typing import List
import logging
import json
import aiosqlite
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from ..handlers.admin import send_admin_log


class UnsubscribedNotification(NotificationBase):
    def __init__(self, channel_username: str, batch_size: int = 50):
        super().__init__(batch_size)
        self.channel_username = channel_username

    async def fetch_target_users(self) -> List[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.
        """
        print("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            all_users = await UserCl.get_all_users()
            print(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}")

            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫—É
            filtered_users = []
            for batch in self.split_into_batches(all_users):
                filtered_users.extend(await self.filter_users_with_servers(batch))

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if filtered_users:
                await send_admin_log(bot, f"–ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã {len(filtered_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–µ–π—á–∞—Å –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            else:
                await send_admin_log(bot, "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.")

            return filtered_users
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    async def filter_users_with_servers(self, batch: List[int]) -> List[int]:
        """
        –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö –ø–æ–¥–ø–∏—Å–∫—É.
        """
        unsubscribed_users = []

        async def check_user(chat_id: int):
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await UserCl.load_user(chat_id)
                if not user or not user.servers:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –∏–º–µ–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    return None

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                if await user.is_subscribed_on_channel.get():
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–Ω. –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ.")
                    return None
                else:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫.")
                    return chat_id
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                return None

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞—Ç—á–µ
        results = await asyncio.gather(*(check_user(chat_id) for chat_id in batch))

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
        unsubscribed_users = [chat_id for chat_id in results if chat_id is not None]
        return unsubscribed_users

    def get_message_template(self) -> str:
        """
        –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        return (
            f"üì¢ <b>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n"
            f"üêß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href='https://t.me/{self.channel_username}'>@Ping_hub</a>,\n"
            "—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å\n"
            "–∏ —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. üöÄ"
        )

    def get_keyboard(self) -> InlineKeyboardMarkup:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.
        """
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{self.channel_username}")],
                [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="i_am_subscribed")]
            ]
        )
        return keyboard

    async def after_send_success(self, user_id: int):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è notification_data –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: unsubscribed_notification_–º–º_–¥–¥.
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        today = datetime.now().strftime("%m_%d")  # –§–æ—Ä–º–∞—Ç –º–º_–¥–¥
        notification_type = f"unsubscribed_notification_{today}"

        query = "SELECT notification_data FROM notifications WHERE chat_id = ?"
        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query, (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    notification_data = json.loads(row[0]) if row and row[0] else {}

                # –û–±–Ω–æ–≤–ª—è–µ–º JSON-–¥–∞–Ω–Ω—ã–µ
                notification_data[notification_type] = {
                    "sent_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "status": "sent"
                }

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–∑—É
                update_query = "UPDATE notifications SET notification_data = ? WHERE chat_id = ?"
                await db.execute(update_query, (json.dumps(notification_data), user_id))
                await db.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ notification_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
