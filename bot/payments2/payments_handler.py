import asyncio
import json
import logging
import os

import redis
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from yookassa import Configuration, Payment
from aiogram import Router, types, Bot

from flask_app.all_utils_flask import logger

from bot.handlers.admin import send_admin_log

load_dotenv()
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –Æ–∫–∞—Å—Å—ã
Configuration.account_id = os.getenv('SHOPID')# –í–∞—à shopId
Configuration.secret_key = os.getenv('API_KEY')  # –í–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á API
REDIS_QUEUE = 'payment_notifications'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = redis.Redis(host='localhost', port=6379, db=0)
router = Router()

@router.callback_query(lambda c: c.data == 'payment_199')
async def process_callback_query(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    bot = callback_query.message.bot
    if chat_id == 456717505:

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
        one_time_id, one_time_link, one_time_payment_method_id = create_one_time_payment(chat_id)

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_payment = (
            "–í—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å –ø–æ–º–æ—â—å—é\n"
            "–ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ækassa\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü: 199—Ä üëáüëáüëá\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 199—Ä", url=one_time_link)]
            ]
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(
            chat_id=chat_id,
            text=  text_payment,
            reply_markup=keyboard
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(
            chat_id=chat_id,
            text="–û–ø–ª–∞—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"#,
            #reply_markup=keyboard
        )

        username = callback_query.message.from_user.username
        await send_admin_log(bot,
            message=f"@{username} - –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å, –Ω–æ —É –Ω–µ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã—à–ª–æ )) ID —á–∞—Ç–∞: {chat_id})")
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback_query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
    await callback_query.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
def create_one_time_payment(user_id):
    payment = Payment.create({
        "amount": {
            "value": "199.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": WEBHOOK_URL
        },
        "capture": True,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram-–±–æ—Ç",
        "metadata": {
            "user_id": user_id
        }
    })
    return payment.id, payment.confirmation.confirmation_url, '0'


async def listen_to_redis_queue(bot: Bot):
    """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ Redis –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö."""
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ tasks")
    while True:
        try:
            logging.info("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ Redis")

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Redis –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            task_data = await asyncio.to_thread(redis_client.lpop, 'payment_notifications')

            if task_data:
                logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–∑ Redis: {task_data}")

                try:
                    task = json.loads(task_data)
                    logging.info(f"–ó–∞–¥–∞—á–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {task}")
                except json.JSONDecodeError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {task_data}")
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    continue

                user_id = task.get('user_id')
                amount = task.get('amount')
                currency = task.get('currency')
                status = task.get('status')

                logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∑–∞–¥–∞—á—É –≤ —Ñ—É–Ω–∫—Ü–∏—é process_payment_message, –≤–∫–ª—é—á–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                await process_payment_message(json.dumps(task), bot)
            else:
                logging.info("–û—á–µ—Ä–µ–¥—å Redis –ø—É—Å—Ç–∞, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É")

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ Redis
            await asyncio.sleep(1)

        except redis.exceptions.ConnectionError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis: {e}")
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏
            await asyncio.sleep(5)


async def process_payment_message(message: str, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ."""
    try:
        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ Python-—Å–ª–æ–≤–∞—Ä—å
        data = json.loads(message)
        user_id = data.get('user_id')
        amount = data.get('amount')
        currency = data.get('currency')
        status = data.get('status')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if not all([user_id, amount, currency, status]):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ: {data}")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        if status == 'payment.succeeded':
            text = f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {currency} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
        elif status == 'payment.waiting_for_capture':
            text = f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {currency} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        elif status == 'payment.canceled':
            text = f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {currency} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
        elif status == 'refund.succeeded':
            text = f"–í–∞—à –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É {amount} {currency} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
        else:
            text = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {status}. –°—É–º–º–∞: {amount} {currency}."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=user_id, text=text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text}")

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")

