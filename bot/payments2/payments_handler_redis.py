import asyncio
import json
import logging
import os

import redis
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from yookassa import Configuration, Payment
from aiogram import Router, types, Bot

from bot.handlers.cleanup import register_message_type, delete_important_message, store_message, \
    delete_unimportant_messages
from bot.payments2.if_user_sucsess_pay import handle_post_payment_actions
from bot.payments2.payments_db import reset_user_data_db
from flask_app.all_utils_flask_db import logger
from bot.handlers.admin import send_admin_log, ADMIN_CHAT_IDS
from bot.utils.db import get_user_subscription_status, update_payment_status, update_user_subscription_db

load_dotenv()
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
listen_task = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –Æ–∫–∞—Å—Å—ã
Configuration.account_id = os.getenv('SHOPID')
Configuration.secret_key = os.getenv('API_KEY')
REDIS_QUEUE = 'payment_notifications'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = redis.Redis(host='217.25.91.109', port=6379, db=0)
router = Router()


#–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å 199 —Ä—É–±–ª–µ–π - –æ—Ç–ø—Ä–∞–≤—è–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
@router.callback_query(lambda c: c.data == 'payment_199')
async def process_callback_query(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.message.from_user.id
    bot = callback_query.message.bot
    await delete_unimportant_messages(chat_id, bot)
    subscription_status = await get_user_subscription_status(chat_id)
    print(subscription_status)
    # if chat_id in ADMIN_CHAT_IDS or chat_id==1388513042:
    if subscription_status == "waiting_pending" or subscription_status == "new_user":

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
        one_time_id, one_time_link, one_time_payment_method_id = create_one_time_payment(chat_id)

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text_payment = (
            "–í—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å –ø–æ–º–æ—â—å—é\n"
            "–ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ækassa\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü: 199—Ä üëáüëáüëá\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 199—Ä", url=one_time_link)]

            ]
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=text_payment,
            reply_markup=keyboard
        )
        await register_message_type(chat_id, sent_message.message_id, "msg_with_pay_url", bot)
        print("text = ", sent_message.text)
    elif subscription_status == "active":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        text_msg = "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –º–µ—Å—è—Ü"
        sent_message = await bot.send_message(
            chat_id=chat_id,
            text=text_msg,
        )
        await store_message(chat_id, sent_message.message_id, text_msg, 'bot')

    # else:
    #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    #     await bot.send_message(
    #         chat_id=chat_id,
    #         text="–û–ø–ª–∞—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"  #,
    #         #reply_markup=keyboard
    #     )

    username = callback_query.message.chat.username
    await send_admin_log(bot,
                         message=f"@{username}  chat_id = {chat_id}  - –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å ID —á–∞—Ç–∞: {chat_id})")
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback_query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
    await callback_query.answer()


@router.callback_query(lambda c: c.data == 'delete_user')
async def delete_user_callback(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –≤–º–µ—Å—Ç–æ user_id
    user_id = callback_query.message.from_user.id
    bot = callback_query.message.bot

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await reset_user_data_db(chat_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        chat_id=chat_id,
        text="–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback_query, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∞–Ω–∏—è
    await callback_query.answer()


async def run_listening_redis_for_duration(bot: Bot):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ Redis –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏."""
    global listen_task
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
        listen_task = asyncio.create_task(listen_to_redis_queue(bot))

    except asyncio.CancelledError:
        logging.info("–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await send_admin_log(bot, "Warning - –æ—á—Ä–µ–¥—å —Ä–µ–¥–∏—Å –∑–∞–≤–µ—Ä–µ—à–∏–æ–∞ —Ä–∞–±–æ—Ç—É")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}") @ router.callback_query(
            lambda c: c.data == 'payment_199')
        await send_admin_log(bot, "Warning - –æ—á—Ä–µ–¥—å —Ä–µ–¥–∏—Å –∑–∞–≤–µ—Ä–µ—à–∏–æ–∞ —Ä–∞–±–æ—Ç—É")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
def create_one_time_payment(user_id):
    payment = Payment.create({
        "amount": {"value": "199.00", "currency": "RUB"},
        "confirmation": {"type": "redirect", "return_url": WEBHOOK_URL},
        "capture": True,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram-–±–æ—Ç",
        "metadata": {"user_id": user_id}
    })
    return payment.id, payment.confirmation.confirmation_url, '0'


async def listen_to_redis_queue(bot: Bot):
    """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ Redis –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö."""
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ tasks")
    while True:
        try:
            #logging.info("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ Redis")
            task_data = await asyncio.to_thread(redis_client.lpop, 'payment_notifications')

            if task_data:
                logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–∑ Redis: {task_data}")

                try:
                    task = json.loads(task_data)
                    logging.info(f"–ó–∞–¥–∞—á–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {task}")
                except json.JSONDecodeError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {task_data}")
                    continue

                # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∑–∞–¥–∞—á—É –≤ —Ñ—É–Ω–∫—Ü–∏—é process_payment_message, –≤–∫–ª—é—á–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                await process_payment_message(json.dumps(task), bot)
            else:
                a = 1
                #logging.info("–û—á–µ—Ä–µ–¥—å Redis –ø—É—Å—Ç–∞, –∂–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É")

            await asyncio.sleep(3)

        except redis.exceptions.ConnectionError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis: {e}")
            await asyncio.sleep(5)


async def process_payment_message(message: str, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ."""
    try:
        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
        data = json.loads(message)
        user_id = data.get('user_id')
        amount = data.get('amount')
        currency = data.get('currency')
        status = data.get('status')
        payment_id = data.get('payment_id')

        # print(data)
        #–¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –ø–ª–∞—Ç–µ–∂–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([user_id, amount, currency, status, payment_id]):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ: {data}")
            return
        # –æ–±–Ω–æ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã payment
        await update_payment_status(payment_id, user_id, amount, currency, status)
        await send_admin_log(bot, f"–ü–æ–π–º–∞–Ω –ø–ª–∞—Ç–µ–∂ –æ—Ç {user_id}, c —Å—Ç–∞—Ç—É—Å–æ–º {status}")
        #await delete_important_message(user_id, "msg_with_pay_url", bot)

        ###############################################
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        if status == 'payment.succeeded':
            await update_user_subscription_db(user_id)
            await handle_post_payment_actions(bot, user_id)
        #–¥—Ä–ø–∏—Å–∞—Ç—å canceled —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        # elif status == 'payment.waiting_for_capture':
        #     text = f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {currency} –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        #
        # elif status == 'payment.canceled':
        #     text = f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} {currency} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω."
        #
        # elif status == 'refund.succeeded':
        #     text = f"–í–∞—à –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—É–º–º—É {amount} {currency} –±—ã–ª –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
        # else:
        #     text = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: {status}. –°—É–º–º–∞: {amount} {currency}."

        #logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text}")

        await delete_important_message(user_id, "msg_with_pay_url", bot)
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        # global listen_task
        # if listen_task and not listen_task.done():
        #     listen_task.cancel()

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
