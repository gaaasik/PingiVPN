
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

from bot.handlers.admin import send_admin_log
from models.UserCl import UserCl
router = Router()


PINGI_CHANNEL = "Ping_hub"

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def subscribe_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/pingi_hub")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="connect_vpn")]
    ])
    return keyboard

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def subscribe_keyboard_if_us_action():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/pingi_hub")],
        [InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="i_am_subscribed")]
    ])
    return keyboard

# –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
def subscription_message():
    return (
        f"üì¢ <b>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <a href='https://t.me/{PINGI_CHANNEL}'>@Ping_hub</a> üêß,\n"
        "—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å\n"
        "–∏ —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏. üöÄ"
    )
@router.callback_query(lambda c: c.data == "i_am_subscribed")
async def handle_subscription_check(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è".
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    chat_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserCl.load_user(chat_id)
    if not user:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return

    is_subscribed = await user.is_subscribed_on_channel.get()

    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback.message.answer(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! üéâ –í –∫–∞–Ω–∞–ª–µ –º—ã –±—É–¥–µ–º –¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å –≤ –∫—É—Ä—Å–µ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π."
        )
        await send_admin_log(callback.bot, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ –Ω–∞–∂–∞–ª '—è –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            subscription_message(),
            reply_markup=subscribe_keyboard_if_us_action(), parse_mode="HTML"
        )
        await send_admin_log(callback.bot, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–∂–∞–ª '—è –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', –Ω–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–Ω–∞—á–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()
