# bot/handlers/menu_device.py
import logging

from aiogram import Router, types
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from bot.handlers.all_menu.menu_subscriptoin_check import subscribe_keyboard
from bot.handlers.cleanup import delete_unimportant_messages, store_important_message
from bot.keyboards.inline import download_app_keyboard
from bot.utils.subscription_check import check_subscription_channel
from models.UserCl import UserCl

router = Router()
# –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WireGuard –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
WIREGUARD_LINKS = {
    "android": "https://play.google.com/store/apps/details?id=com.wireguard.android",
    "iPhone": "https://apps.apple.com/us/app/wireguard/id1441195209",
    "windows": "https://download.wireguard.com/windows-client/",
    "mac": "https://apps.apple.com/us/app/wireguard/id1451685025",
    "linux": "https://www.wireguard.com/install/"
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è WireGuard
def wireguard_keyboard(device):
    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if device in WIREGUARD_LINKS:
        buttons.append([InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å WireGuard", url=WIREGUARD_LINKS[device])])

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è "–Ø —Å–∫–∞—á–∞–ª ‚úÖ"
    buttons.append([InlineKeyboardButton(text="–Ø —Å–∫–∞—á–∞–ª ‚úÖ", callback_data="app_downloaded")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_instruction_text_for_device(device: str, vpn_link: str) -> str:
    # –û–±—â–∏–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if device.lower() == "android":
        instruction_text = (
            f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:</b>\n\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á <b>VLESS</b> (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ).\n"
            f"2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href='https://play.google.com/store/apps/details?id=com.hiddify'><b>Hiddify</b> (Play Market)</a> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ‚ûï ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.\n\n"
            f"3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫—Ä—É–≥–ª—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑—å—é! üåê\n\n"
            f"<b>–í–∞—à –∫–ª—é—á:</b>\n<pre>{vpn_link}</pre>"
        )

    elif device.lower() == "iphone":
        instruction_text = (
            f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iPhone:</b>\n\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á <b>VLESS</b> (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ).\n"
            f"2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href='https://apps.apple.com/us/app/streisand/id6450534064'><b>Streisand</b> (App Store)</a> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ‚ûï ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.\n\n"
            f"3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π! üöÄ\n\n"
            f"<b>–í–∞—à –∫–ª—é—á:</b>\n<pre>{vpn_link}</pre>"
        )

    elif device.lower() == "mac":
        instruction_text = (
            f"üíª <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Mac:</b>\n\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á <b>VLESS</b> (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ).\n"
            f"2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href='https://apps.apple.com/us/app/foxray/id6448898396'><b>Foxray</b> (App Store)</a> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ‚ûï ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.\n\n"
            f"3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π! üöÄ\n\n"
            f"<b>–í–∞—à –∫–ª—é—á:</b>\n<pre>{vpn_link}</pre>"
        )

    elif device.lower() == "linux":
        instruction_text = (
            f"üêß <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Linux:</b>\n\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á <b>VLESS</b> (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ).\n"
            f"2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href='https://github.com/MatsuriDayo/nekoray/'><b>Nekoray</b> (GitHub)</a> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ‚ûï ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.\n\n"
            f"3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π! üöÄ\n\n"
            f"<b>–í–∞—à –∫–ª—é—á:</b>\n<pre>{vpn_link}</pre>"
        )

    elif device.lower() == "windows":
        instruction_text = (
            f"üíª <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:</b>\n\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á <b>VLESS</b> (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ).\n"
            f"2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <a href='https://apps.microsoft.com/detail/9pdfnl3qv2s5?hl=ru-ru&gl=RU'><b>Hiddify</b> (Microsoft Store)</a> –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ‚ûï ¬´–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞¬ª.\n\n"
            f"3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π! üöÄ\n\n"
            f"<b>–í–∞—à –∫–ª—é—á:</b>\n<pre>{vpn_link}</pre>"
        )
    else:
        instruction_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."

    return instruction_text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
@router.callback_query(lambda c: c.data.startswith("device_"))
async def handle_device_choice(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    bot = callback_query.bot
    us = await UserCl.load_user(chat_id)

    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_unimportant_messages(callback_query.message.chat.id, callback_query.bot)

    if not await us.check_subscription_channel():
        await callback_query.message.answer(
            f"VPN —Ä–∞–±–æ—Ç–∞–µ—Ç *–±–µ–∑ —Ä–µ–∫–ª–∞–º—ã*. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ‚Äî *–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å* –Ω–∞ –∫–∞–Ω–∞–ª *Pingi Hub*",
            reply_markup=subscribe_keyboard(),
            parse_mode="Markdown"

        )
        await callback_query.answer()
        return

    device = callback_query.data.split('_')[1]
    await us.device.set(device)

    ##########################################       VLESS          ######################################################

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
    if not us.servers:
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä VLESS
        await us.add_key_vless()

    # –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º VLESS
    url_vless = None
    for server in us.servers:
        if await server.name_protocol.get() == "vless":
            url_vless = await server.url_vless.get()
            break

    # –ï—Å–ª–∏ URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if not url_vless:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VLESS.")
        await callback_query.answer()
        return


    # # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ VLESS
    # check_protocol_vless = False
    # for server in us.servers:
    #     if await server.name_protocol.get() == "vless":
    #         check_protocol_vless = True
    #         break
    #
    # # –ï—Å–ª–∏ VLESS –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π URL
    # if check_protocol_vless:
    #     for server in us.servers:
    #         if await server.name_protocol.get() == "vless":
    #             url_vless = await server.url_vless.get()
    #             break
    # else:
    #     await us.add_key_vless()
    #     url_vless = await us.servers[0].url_vless.get()
    #############################################
    try:
        text = get_instruction_text_for_device(device, url_vless)
        message = await callback_query.message.answer(
            text,
            parse_mode="HTML", #–≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ò–ù–ê–ß–ï –û–®–ò–ë–ö–ê
            disable_web_page_preview=True,
            reply_markup=download_app_keyboard(device)  # –ü–µ—Ä–µ–¥–∞—ë–º `device` –≤ `download_app_keyboard`
        )
        await callback_query.answer()

    except IndexError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()



    #############################################       WIREGUARD     #######################################################

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard
    # await callback_query.message.answer(
    #     "–°–∫–∞—á–∞–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.",
    #     reply_markup=wireguard_keyboard(device),
    #     parse_mode="Markdown"
    # )
    # await callback_query.answer()



