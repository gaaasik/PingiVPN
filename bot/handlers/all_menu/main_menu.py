import asyncio

from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from bot.handlers.cleanup import delete_unimportant_messages, store_message, messages_for_db, register_message_type
import os

from bot.states.StatesCL import GeneralStates
#from fastapi_app.all_utils_flask_db import logger
from models.UserCl import UserCl
from bot.keyboards.inline import main_menu_inline_keyboard

router = Router()

from datetime import datetime
import logging

logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –¥–Ω–µ–π
def get_days_text(days):
    if 11 <= days % 100 <= 14:
        return f"{days} –¥–Ω–µ–π"
    elif days % 10 == 1:
        return f"{days} –¥–µ–Ω—å"
    elif 2 <= days % 10 <= 4:
        return f"{days} –¥–Ω—è"
    else:
        return f"{days} –¥–Ω–µ–π"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def get_count_days_since_registration(us):
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º:—Å—Å"
        registration_date_str = await us.registration_date.get()
        registration_date = datetime.strptime(registration_date_str, "%d.%m.%Y %H:%M:%S")
        days_since_registration = (datetime.now() - registration_date).days
        days_text = get_days_text(days_since_registration)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        if days_since_registration == 0:
            return "üéâ –í—ã —Å –Ω–∞–º–∏ –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞–±—É–¥—å—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º! üöÄ"
        else:
            return f"üïì –í—ã —Å –Ω–∞–º–∏ —É–∂–µ {days_text}! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ! üöÄ"
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", e)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."


async def get_user_status_text(us):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
        count_key = await us.count_key.get()
        active_server = us.active_server

        if count_key == 0 or not active_server:
            # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç
            logger.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–ª—é—á–µ–π. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ VPN.")
            return f"–ù–∞–∂–º–∏—Ç–µ *–ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN*\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞
        status_key = await us.active_server.status_key.get()
        enabled = await us.active_server.enable.get()
        has_paid_key = await us.active_server.has_paid_key.get()
        end_date_str = await us.active_server.date_key_off.get_date()

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
        try:
            end_date = datetime.strptime(end_date_str, "%d.%m.%Y")
        except ValueError as date_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã {end_date_str} –≤ –æ–±—ä–µ–∫—Ç datetime: {date_error}")
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
        today = datetime.now()
        remaining_days = (end_date - today).days
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—é—á–∞
        if (enabled == True) and (has_paid_key == 0) and remaining_days > 0:
            return f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ {end_date_str} (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_days} –¥–Ω–µ–π)"

        elif enabled == False or remaining_days < 0:
            return ("–ö–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞")

        elif (enabled == True) and (has_paid_key > 0):
            expiration_text = ""
            if remaining_days < 0:
                expiration_text = f"–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞"
            else:
                expiration_text = f"–ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {end_date_str} (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_days} –¥–Ω–µ–π)"

            return expiration_text


        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞: {status_key}")
            return "–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e, exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


async def show_main_menu(chat_id: int, bot: Bot, edit=False, message=None):
    us = await UserCl.load_user(chat_id)
    if not us:
        await bot.send_message(chat_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    user_name_full = await us.user_name_full.get()
    user_name = await us.user_login.get()
    status_text = await get_user_status_text(us)
    days_text = await get_count_days_since_registration(us)

    text = (
        f"–ü—Ä–∏–≤–µ—Ç {user_name_full}! üï∂\n\n"
        "PingiVPN ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:\n\n"
        "üì± –î–æ—Å—Ç—É–ø –∫ —Å–æ—Ü—Å–µ—Ç—è–º\n"
        "üõ° –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "üì∂ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º\n"
        "üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "üíª –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
        f"üîë –°—Ç–∞—Ç—É—Å: *{status_text}*\n\n"
        f"{days_text}"
    )

    if edit and message:
        await message.edit_text(text, reply_markup=main_menu_inline_keyboard(), parse_mode="Markdown")
    else:
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=main_menu_inline_keyboard(), parse_mode="Markdown")




@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@router.message(Command(commands=["menu"]))
@router.callback_query(F.data == "main_menu")
async def handle_main_menu(event: types.Message | types.CallbackQuery, state: FSMContext):
    await state.set_state(GeneralStates.main_menu)

    if isinstance(event, types.CallbackQuery):
        await event.answer()
        await show_main_menu(
            chat_id=event.message.chat.id,
            bot=event.bot,
            edit=True,
            message=event.message
        )
    elif isinstance(event, types.Message):
        try:
            await event.delete()
        except Exception:
            pass  # –ò–Ω–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –±–æ—Ç–∞)

        await show_main_menu(
            chat_id=event.chat.id,
            bot=event.bot,
            edit=False  # –ü–æ—Å–∫–æ–ª—å–∫—É edit –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ message
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—É–ø–µ—Ä!"
@router.callback_query(lambda c: c.data == "super")
async def handle_super_button(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    bot = callback_query.bot

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ü—É–ø–µ—Ä!"
    await bot.send_message(chat_id=chat_id, text="–ü—É–ø–µ—Ä!")
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await asyncio.sleep(1)
    await show_main_menu(chat_id, bot)
