from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from bot.handlers.cleanup import delete_unimportant_messages, store_message, messages_for_db, register_message_type
import os

from flask_app.all_utils_flask_db import logger
from models.UserCl import UserCl
from bot.keyboards.inline import main_menu_inline_keyboard

router = Router()

from datetime import datetime
import logging

logger = logging.getLogger(__name__)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –¥–Ω–µ–π
def get_days_text(days):
    if 11 <= days % 100 <= 14:
        return f"{days} –¥–Ω–µ–π"
    elif days % 10 == 1:
        return f"{days} –¥–µ–Ω—å"
    elif 2 <= days % 10 <= 4:
        return f"{days} –¥–Ω—è"
    else:
        return f"{days} –¥–Ω–µ–π"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def get_count_days_since_registration(us):
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º:—Å—Å"
        registration_date_str = await us.registration_date.get()
        registration_date = datetime.strptime(registration_date_str, "%d.%m.%Y %H:%M:%S")
        days_since_registration = (datetime.now() - registration_date).days
        days_text = get_days_text(days_since_registration)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        if days_since_registration == 0:
            return "üéâ –í—ã —Å –Ω–∞–º–∏ –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å! –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∑–∞–±—É–¥—å—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ—Å—Ç—É–ø–æ–º! üöÄ"
        else:
            return f"üïì –í—ã —Å –Ω–∞–º–∏ —É–∂–µ {days_text}! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ! üöÄ"
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: %s", e)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."


async def get_user_status_text(us):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
        count_key = await us.count_key.get()

        if count_key == 0:
            # –ï—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç
            return f"–ù–∞–∂–º–∏—Ç–µ *–ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN*\n"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ –∫–ª—é—á–∞
        status_key = await us.servers[0].status_key.get()
        end_date_str = await us.servers[0].date_key_off.get_date()

        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
        end_date = datetime.strptime(end_date_str, "%d.%m.%Y")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
        today = datetime.now()
        remaining_days = (end_date - today).days

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–ª—é—á–∞
        if status_key == "free_key":
            return f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ *{end_date_str}* (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_days} –¥–Ω–µ–π)"

        elif status_key == "blocked":
            return "*–ö–ª—é—á –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*"

        elif status_key == "active":
            return f"–ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –¥–æ *{end_date_str}* (–æ—Å—Ç–∞–ª–æ—Å—å {remaining_days} –¥–Ω–µ–π)"

        else:
            return "–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"

    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", e)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(chat_id: int, bot: Bot):
    user = await UserCl.load_user(chat_id)

    if not user:
        await bot.send_message(chat_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ chat_id
    us = await UserCl.load_user(chat_id)

    user_name_full = await us.user_name_full.get()
    days_since_registration_text = await get_count_days_since_registration(us)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status_text = await get_user_status_text(us)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    text = (
        f"–ü—Ä–∏–≤–µ—Ç {user_name_full}! üï∂\n\n"
        "PingiVPN - –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
        "üì± –î–æ—Å—Ç—É–ø –∫ –ª—é–±—ã–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º\n"
        "üõ° –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å\n"
        "üì∂ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º\n"
        "üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "üíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n"
        f"üîë –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"{days_since_registration_text}\n"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é
    await bot.send_message(chat_id=chat_id, text=text, reply_markup=main_menu_inline_keyboard(), parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@router.message(Command(commands=["menu"]))
@router.callback_query(F.data == "main_menu")
async def handle_main_menu(event: types.Message | types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (Message –∏–ª–∏ CallbackQuery)
    if isinstance(event, types.CallbackQuery):
        chat_id = event.message.chat.id
        bot = event.bot
        await event.answer()  # –ó–∞–∫—Ä—ã—Ç—å CallbackQuery, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    else:
        chat_id = event.chat.id
        bot = event.bot

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(chat_id, bot)
