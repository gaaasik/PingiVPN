from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from datetime import datetime
import aiosqlite
import os

from bot_instance import bot
from bot.handlers.admin import ADMIN_CHAT_IDS, send_admin_log
from bot.states.StatesCL import FeedbackStates

router = Router()


# ========== –û–ë–©–ò–ï –ö–ù–û–ü–ö–ò ==========

def main_menu_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )

def skip_back_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="leave_feedback")]
        ]
    )


# ========== –ú–ï–ù–Æ –í–´–ë–û–†–ê –¢–ò–ü–ê –û–¢–ó–´–í–ê ==========
# –≤–æ–æ–æ–æ–æ–æ–æ–æ–æ—Ç –∑–¥–µ—Å—å
#
# —Ç–µ—Å—Ç–∏—Ç—å –¥–∞–ª—å—à–µ —ç—Ç–æ –º–µ–Ω—é !

@router.callback_query(F.data == "leave_feedback")
async def handle_feedback(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –û—Ü–µ–Ω–∏—Ç—å —Å–µ—Ä–≤–∏—Å", callback_data="feedback_rating")],
            [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è", url="https://t.me/pingi_help")],
            [InlineKeyboardButton(text="‚ùó –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", url="https://t.me/pingi_help")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    )
    await state.set_state(FeedbackStates.choosing_feedback_type)
    await callback.message.edit_text(
        "üôè –ù–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )


# ========== FSM: –û—Ü–µ–Ω–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ ==========

@router.callback_query(F.data == "feedback_rating")
async def start_feedback_rating(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FeedbackStates.rating_speed)
    await callback.message.edit_text(
        f"üî¢ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏?\n <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 10</b>",
        reply_markup=skip_back_keyboard()
    )
    await callback.answer()

@router.message(FeedbackStates.rating_speed)
async def process_rating_speed(message: Message, state: FSMContext):
    score = message.text.strip()
    if not score.isdigit() or not (1 <= int(score) <= 10):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",reply_markup=skip_back_keyboard(),)
        return
    await state.update_data(rating_speed=int(score))
    await state.set_state(FeedbackStates.rating_difficulty)
    await message.answer("üß© –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è? \n <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 10</b>", reply_markup=skip_back_keyboard())

@router.message(FeedbackStates.rating_difficulty)
async def process_rating_difficulty(message: Message, state: FSMContext):
    score = message.text.strip()
    if not score.isdigit() or not (1 <= int(score) <= 10):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",reply_markup=skip_back_keyboard(),)
        return
    await state.update_data(rating_difficulty=int(score))
    await state.set_state(FeedbackStates.rating_comment)
    await message.answer("ü§ù –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –Ω–∞—Å –¥—Ä—É–≥—É? \n <b>–í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 10</b>", reply_markup=skip_back_keyboard())

@router.message(FeedbackStates.rating_comment)
async def process_rating_comment(message: Message, state: FSMContext):
    recommend_score = message.text.strip()
    if not recommend_score.isdigit() or not (1 <= int(recommend_score) <= 10):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",reply_markup=skip_back_keyboard(),)
        return

    data = await state.get_data()
    chat_id = message.chat.id
    username = message.from_user.username or "–ë–µ–∑ username"
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

    rating_speed = data.get("rating_speed")
    rating_difficulty = data.get("rating_difficulty")
    recommend_score = int(recommend_score)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üì© <b>–û—Ç–∑—ã–≤ –æ—Ç</b> @{username} (chat_id: <code>{chat_id}</code>):\n\n"
        f"üî¢ <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> {rating_speed}/10\n"
        f"üß© <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b> {rating_difficulty}/10\n"
        f"ü§ù <b>–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –±—ã –¥—Ä—É–≥—É:</b> {recommend_score}/10\n"
        f"üïí <i>{timestamp}</i>"
    )

    await send_admin_log(bot,text)

    # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        async with aiosqlite.connect(os.getenv("database_path_local")) as db:
            await db.execute(
                """
                INSERT INTO user_questions (chat_id,user_id, question_text, timestamp)
                VALUES (?, ?, ?, ?)
                """,
                (chat_id,0, f"–û—Ü–µ–Ω–∫–∞: {rating_speed}/10 | –°–ª–æ–∂–Ω–æ—Å—Ç—å: {rating_difficulty}/10 | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommend_score}/10", timestamp)
            )
            await db.commit()
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.")
        print("DB insert error:", e)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", reply_markup=main_menu_keyboard())
    await state.clear()


# ========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∂–∞–ª–æ–± ==========
#
# @router.callback_query(F.data == "feedback_suggestions")
# async def handle_suggestion(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="https://t.me/pingi_help")],
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         ]
#     ))
#     await state.clear()
#
# @router.callback_query(F.data == "feedback_issue")
# async def handle_issue(callback: CallbackQuery, state: FSMContext):
#     await callback.answer("‚úâÔ∏è –°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", show_alert=True)
#     await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/pingi_help")],
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         ]
#     ))
#     await state.clear()
