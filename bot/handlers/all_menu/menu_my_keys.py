from aiogram import types, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup


from bot.handlers.admin import ADMIN_CHAT_IDS
from bot.handlers.all_menu.main_menu import get_user_status_text
from bot.handlers.all_menu.menu_buy_vpn import get_add_key_keyboard
from urllib.parse import quote_plus
from models.UserCl import UserCl
import logging

router = Router()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_first_payment_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–ª—é—á", callback_data="buy_vpn")],
            #[InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å", callback_data="app_downloaded")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )


def keyboard_without_key():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á", callback_data="connect_vpn")]
        ]
    )

import logging

def escape_markdown(text: str) -> str:
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '!']
    for char in special_chars:
        text = text.replace(char, f"\\{char}")
    return text


async def generate_key_status_text(us: UserCl) -> (str, InlineKeyboardMarkup):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    count_key = await us.count_key.get()
    active_server = us.active_server

    if count_key == 0 or not active_server:
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–ª—é—á–µ–π
        text = (
            "<b>–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã.</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–ª—é—á."
        )
        keyboard = get_add_key_keyboard()

    else:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
        name_key = await us.active_server.name_key.get()
        country_flag = await us.active_server.country_server.get_country()
        traffic_limit = "200 Gb / –≤ –º–µ—Å"
        vless_url = await us.active_server.url_vless.get()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞
        status_text = await get_user_status_text(us)


        name_protocol = await us.active_server.name_protocol.get()

        sub_link = f"http://194.87.208.18:8080/sub/{us.chat_id}"
        v2raytun_link = f"v2raytun://import/{quote_plus(sub_link)}"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥", url=sub_link)],
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–ª—é—á", callback_data="buy_vpn")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )


        if name_protocol == "wireguard":
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
            text = (
                f"üîê <b>–í–∞—à VPN-–∫–ª—é—á:</b>\n\n"
                f"- <b>–ò–º—è –∫–ª—é—á–∞</b>: {name_key}\n"
                f"- <b>–°—Ç—Ä–∞–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>: {country_flag}\n"
                f"- <b>–°—Ç–∞—Ç—É—Å</b>: <b>{status_text}</b>\n"
                #f"- <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ</b>: <b>{expiration_text}</b>\n\n"
                f"üåê <b>–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞</b>: {traffic_limit}\n\n"
            )
        else:

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML
            text = (
                f"üîê <b>–í–∞—à VPN-–∫–ª—é—á:</b>\n\n"
                f"- <b>–ò–º—è –∫–ª—é—á–∞</b>: {name_key}\n"
                f"- <b>–°—Ç—Ä–∞–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>: {country_flag}\n"
                f"- <b>–°—Ç–∞—Ç—É—Å</b>: {status_text}\n"
                #f"- <b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ</b>: <b>{expiration_text}</b>\n\n"
                f"üåê <b>–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞</b>: {traffic_limit}\n\n"
                f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                f"<pre>{vless_url}</pre>"
            )

    return text, keyboard

@router.callback_query(lambda c: c.data == "my_keys")
async def handle_my_keys(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    us = await UserCl.load_user(chat_id)
#
####################################TEST#####################################
    print("tolsemenov MENU_MY_KEYS ", chat_id)
    if chat_id in ADMIN_CHAT_IDS:
        us = await UserCl.load_user(chat_id)
        if us.active_server:
            await us.add_key_from_buffer(us.active_server, "vless")

            #await us.active_server.enable.set(False)
            #await task_manager.send_creating_user(server_ip)
            #await us.active_server.delete_user_key()
            #await us.update_key_to_vless("vless://05f71aa4-6ddb-4466-a15a-d523a7b4d24e@194.87.208.18:443?type=tcp&security=reality&pbk=kX9Di-f2fMnJjRxx2rMsy6_Pe5gXyRO4S1NrZw8Dcyk&fp=chrome&sni=google.com&sid=9c&spx=%2F&flow=xtls-rprx-vision#user_1_Netherlands")
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            text, keyboard = await generate_key_status_text(us)
            sub_link = f"https://194.87.208.18:8080/sub/{chat_id}"
            v2raytun_link = f"v2raytun://import/{quote_plus(sub_link)}"
            text = v2raytun_link
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.answer(text, reply_markup=keyboard, disable_web_page_preview=True,
                                                parse_mode="HTML")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–ª—é—á–∞—Ö: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await callback_query.answer()

    else:
###########################################################################
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            text, keyboard = await generate_key_status_text(us)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.answer(text, reply_markup=keyboard, disable_web_page_preview=True,
                                                parse_mode="HTML")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–ª—é—á–∞—Ö: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await callback_query.answer()
