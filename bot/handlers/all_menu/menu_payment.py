import asyncio
import logging
import re
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from models.UserCl import UserCl
from bot.payments2.payments_handler_redis import create_one_time_payment

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ email
class PaymentForm(StatesGroup):
    awaiting_email = State()

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
def validate_email(email) -> bool:
    # –ï—Å–ª–∏ email None –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
    if not isinstance(email, str):
        return False
    pattern = r"^[\w\.-]+@[\w\.-]+\.\w{2,4}$"
    return bool(re.match(pattern, email))

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ email
async def request_user_email(chat_id: int, bot: Bot, state: FSMContext):
    try:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
            ]
        )
        sent_message = await bot.send_message(chat_id, text=text, reply_markup=keyboard)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chat_id={chat_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
async def send_payment_link(chat_id: int, bot: Bot, user_login: str, email: str, state: FSMContext):
    try:
        one_time_id, one_time_link = await create_one_time_payment(chat_id, user_login, email)
        text = (
            f"–í—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å –ø–æ–º–æ—â—å—é\n"
            "–ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ækassa\n\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü: 199‚ÇΩ üëáüëáüëá\n\n"
            f"–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–¥–µ—Ç –Ω–∞ –ø–æ—á—Ç—É {email}\n\n"

        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É", url=one_time_link)],
                [
                    InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É", callback_data="edit_email"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")
                ]
            ]
        )
        await bot.send_message(chat_id, text=text, reply_markup=keyboard)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chat_id={chat_id}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å 199 —Ä—É–±–ª–µ–π"
@router.callback_query(lambda c: c.data == 'payment_199')
async def handle_payment_request(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        us = await UserCl.load_user(chat_id)
        if not us:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chat_id={chat_id}")
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await callback_query.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á
        if await us.count_key.get() == 0:
            await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á.")
            await callback_query.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_email = await us.email.get()
        if user_email is None or not validate_email(user_email):
            logging.info(f"–ó–∞–ø—Ä–æ—Å email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chat_id={chat_id}")
            await request_user_email(chat_id, bot, state)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
            await state.set_state(PaymentForm.awaiting_email)
        else:
            user_login = await us.user_login.get()
            await send_payment_link(chat_id, bot, user_login, user_email, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_payment_request: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback_query
        await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email
@router.message(PaymentForm.awaiting_email)
async def handle_email_input(message: types.Message, state: FSMContext):
    email = message.text
    chat_id = message.chat.id
    bot = message.bot

    if validate_email(email):
        try:
            us = await UserCl.load_user(chat_id)
            await us.email.set(email)
            user_login = await us.user_login.get()
            await send_payment_link(chat_id, bot, user_login, email, state)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]]
        )
        await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è email
@router.callback_query(lambda c: c.data in ["confirm_email", "edit_email"])
async def handle_email_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot
    data = await state.get_data()
    email = data.get("email")

    if callback_query.data == "confirm_email":
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email: {email}")
    elif callback_query.data == "edit_email":
        await request_user_email(chat_id, bot, state)
        await state.set_state(PaymentForm.awaiting_email)

    await callback_query.answer()

# –¢–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è email —á–µ—Ä–µ–∑ 1 —á–∞—Å
async def start_email_timeout(chat_id: int, state: FSMContext, timeout: int = 3600):
    await asyncio.sleep(timeout)
    if await state.get_state() == PaymentForm.awaiting_email:
        await state.clear()
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è chat_id={chat_id}")
        #await bot.send_message(chat_id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ email –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(lambda c: c.data == 'cancel_payment')
async def handle_cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot

    await state.clear()
    await bot.send_message(chat_id, "–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    logging.info(f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: chat_id={chat_id}")

    await callback_query.answer()
