# menu_buy_vpn.py
import asyncio

from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery

from bot.database.db import get_user_subscription_status
from bot.handlers.admin import send_admin_log
from bot.handlers.cleanup import register_message_type
from bot.payments2.payments_handler_redis import create_one_time_payment
from models.UserCl import UserCl

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ email
class PaymentForm(StatesGroup):
    awaiting_email = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ email
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
def validate_email(email: str) -> bool:
    import re
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
    pattern = r"^[\w\.-]+@[\w\.-]+\.\w{2,4}$"
    return bool(re.match(pattern, email))


# 2. –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ email
async def request_user_email(chat_id: int, bot: Bot, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
        ]
    )

    sent_message = await bot.send_message(chat_id, text=text, reply_markup=keyboard)
    await register_message_type(chat_id, sent_message.message_id, "request_email_msg", bot)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
    await state.set_state(PaymentForm.awaiting_email)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ 1 —á–∞—Å
    asyncio.create_task(start_email_timeout(chat_id, state))


# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å 199 —Ä—É–±–ª–µ–π"

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å 199 —Ä—É–±–ª–µ–π"
@router.callback_query(lambda c: c.data == 'payment_199')
async def handle_payment_request(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    us = await UserCl.load_user(chat_id)
    if not us:
        await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
    if await us.count_key.get() == 0:
        await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á ")
        return

    status_key = await us.servers[0].status_key.get()

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email
    if status_key in ["key_free", "blocked"]:
        await request_user_email(chat_id, bot, state)
        await state.set_state(PaymentForm.awaiting_email)
    elif status_key == "active":
        expire_key_after_payment = us.servers[0].date_expire_of_paid_key.get()
        await bot.send_message(chat_id, text=f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ *{expire_key_after_payment}*")
    else:
        await bot.send_message(chat_id, text="–û–ø–ª–∞—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback_query
    await callback_query.answer()


# 3. –í–∞–ª–∏–¥–∞—Ü–∏—è email
@router.message(PaymentForm.awaiting_email)
async def handle_email_input(message: types.Message, state: FSMContext):
    email = message.text
    chat_id = message.chat.id
    bot = message.bot

    # await save_user_email_to_db(chat_id,email)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if validate_email(email):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º email
        us = await UserCl.load_user(chat_id)
        await us.email.set(email)
        user_login = await us.user_login.get()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        await state.update_data(email=email)
        one_time_id, one_time_link = await create_one_time_payment(chat_id, user_login, email)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email
        text = (f"–í—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Å –ø–æ–º–æ—â—å—é\n"
                "–ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ækassa\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—Ü: 199—Ä üëáüëáüëá\n\n"
                f"–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–¥–µ—Ç –Ω–∞ –ø–æ—á—Ç—É {email}\n\n"
                f"ID –ø–ª–∞—Ç–µ–∂–∞ {one_time_id}")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É", url=one_time_link)],  # –ö–Ω–æ–ø–∫–∞ "–î–∞" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                [  # –ö–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂" –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                    InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É", callback_data="edit_email"),
                    InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")
                ]
            ]
        )

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email



        sent_message = await bot.send_message(chat_id, text=text, reply_markup=keyboard)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]])
        # –°–æ–æ–±—â–∞–µ–º –æ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        send_message = await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.",
                                              reply_markup=keyboard)



@router.callback_query(lambda c: c.data in ["confirm_email", "edit_email"])
async def handle_email_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot
    data = await state.get_data()
    email = data.get("email")



    if callback_query.data == "confirm_email":
        pass
    elif callback_query.data == "edit_email":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email
        await request_user_email(chat_id, bot,state)
        await state.set_state(PaymentForm.awaiting_email)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback_query
    await callback_query.answer()
async def start_email_timeout(chat_id: int, state: FSMContext, timeout: int = 3600):
    await asyncio.sleep(timeout)  # –û–∂–∏–¥–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞
    current_state = await state.get_state()
    if current_state == PaymentForm.awaiting_email:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ

# 4. –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞

@router.callback_query(lambda c: c.data == 'cancel_payment')
async def handle_cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot

    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await bot.send_message(chat_id, "–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")

    await callback_query.answer()


