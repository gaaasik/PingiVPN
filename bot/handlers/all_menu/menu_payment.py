import asyncio
import logging
import re
from aiogram import Router, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from bot.handlers.admin import send_admin_log
from bot.handlers.all_menu.main_menu import show_main_menu
from bot.handlers.all_menu.menu_buy_vpn import TARIFFS
from models.UserCl import UserCl
from bot.payments2.payments_handler_redis import create_one_time_payment
#import dns.resolver
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ email
class PaymentForm(StatesGroup):
    awaiting_email = State()

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email

def validate_email(email: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ email –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞.
    :param email: Email-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    :return: True, –µ—Å–ª–∏ email-–∞–¥—Ä–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏–Ω–∞—á–µ False.
    """
    if not isinstance(email, str):
        return False

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ email
    pattern = r"^(?!.*\.\.)(?!.*\.$)(?!.*@.*@)[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$"

    # –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    return bool(re.match(pattern, email))

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ email
async def request_user_email(chat_id: int, bot: Bot, state: FSMContext):
    try:
        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞:"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
            ]
        )
        sent_message = await bot.send_message(chat_id, text=text, reply_markup=keyboard)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chat_id={chat_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")


async def send_payment_link(chat_id: int, bot: Bot, user_login: str, email: str, state: FSMContext, tariff_code: str):
    tariff = TARIFFS.get(tariff_code)
    if not tariff:
        await bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        return

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
        one_time_id, one_time_link = await create_one_time_payment(chat_id, user_login, email, tariff_code)

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"üõ° *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ÆKassa*\n\n"
            f"üíµ {tariff['label']}: *{tariff['amount']}‚ÇΩ*\n\n"
            f"üìß –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ *{email}*\n\n"
            "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã ‚¨áÔ∏è"
        )

        # –ö–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É", url=one_time_link)],
                [
                    InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É", callback_data="edit_email"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")
                ]
            ]
        )

        await bot.send_message(chat_id, text=text, reply_markup=keyboard, parse_mode="Markdown")
        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {tariff_code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chat_id={chat_id}")
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {tariff_code}: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


#
# # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É process_payment_message
# async def send_payment_link(chat_id: int, bot: Bot, user_login: str, email: str, state: FSMContext):
#     try:
#         one_time_id, one_time_link = await create_one_time_payment(chat_id, user_login, email)
#         text = (
#             "üõ° *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ÆKassa*\n\n"
#             "üíµ 1 –º–µ—Å—è—Ü: *199‚ÇΩ*\n\n"
#             f"üìß –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ *{email}*\n\n"
#             "‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã ‚¨áÔ∏è"
#         )
#
#         keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É", url=one_time_link)],
#                 [
#                     InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—á—Ç—É", callback_data="edit_email"),
#                     InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")
#                 ]
#             ]
#         )
#         await bot.send_message(chat_id, text=text, reply_markup=keyboard,parse_mode="Markdown")
#         logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: chat_id={chat_id}")
#
#         # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
#         await state.clear()
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É: {e}")
#         await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å 199 —Ä—É–±–ª–µ–π"
# @router.callback_query(lambda c: c.data == 'payment_199')
# async def handle_payment_request(callback_query: types.CallbackQuery, state: FSMContext):
#     chat_id = callback_query.message.chat.id
#     bot = callback_query.message.bot
#
#     try:
#         # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
#         us = await UserCl.load_user(chat_id)
#         if not us:
#             logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chat_id={chat_id}")
#             await bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
#             await callback_query.answer()
#             return
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á
#         if await us.count_key.get() == 0:
#             await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã, –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á.")
#             await callback_query.answer()
#             return
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         user_email = await us.email.get()
#         if user_email is None or not validate_email(user_email):
#             logging.info(f"–ó–∞–ø—Ä–æ—Å email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: chat_id={chat_id}")
#             await request_user_email(chat_id, bot, state)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º email, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
#             await state.set_state(PaymentForm.awaiting_email)
#         else:
#             user_login = await us.user_login.get()
#             await send_payment_link(chat_id, bot, user_login, user_email, state)
#         await send_admin_log(callback_query.bot, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞–∂–∞–ª –í–¢–û–†–£–Æ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å")
#
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_payment_request: {e}")
#         await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     finally:
#         # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback_query
#         await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ email

@router.callback_query(lambda c: c.data.startswith("payment_plan_"))
async def handle_tariff_payment(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot

    tariff_code = callback_query.data.split("_")[-1]  # "1", "3", "6"
    tariff = TARIFFS.get(tariff_code)

    if not tariff:
        await bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        await callback_query.answer()
        return

    try:
        user = await UserCl.load_user(chat_id)
        if not user:
            await bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback_query.answer()
            return

        if await user.count_key.get() == 0:
            await bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ VPN.")
            await callback_query.answer()
            return

        user_email = await user.email.get()
        if not user_email or not validate_email(user_email):
            await request_user_email(chat_id, bot, state)
            await state.set_state(PaymentForm.awaiting_email)
            await state.update_data(tariff_code=tariff_code)
        else:
            user_login = await user.user_login.get()
            await send_payment_link(chat_id, bot, user_login, user_email, state, tariff_code)

        await send_admin_log(bot, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É: {tariff['label']}")
        await callback_query.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback_query.answer()


@router.message(PaymentForm.awaiting_email)
async def handle_email_input(message: types.Message, state: FSMContext):
    email = message.text
    chat_id = message.chat.id
    bot = message.bot
    data = await state.get_data()
    tariff_code = data.get("tariff_code")

    if validate_email(email):
        try:
            us = await UserCl.load_user(chat_id)
            await us.email.set(email)
            user_login = await us.user_login.get()
            await send_payment_link(chat_id, bot, user_login, email, state, tariff_code)
            await send_admin_log(bot, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É, –∂–¥–µ–º –æ–ø–ª–∞—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email: {e}")
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]]
        )
        await bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.", reply_markup=keyboard)

@router.callback_query(lambda c: c.data in ["confirm_email", "edit_email"])
async def handle_email_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot
    data = await state.get_data()
    tariff_code = data.get("tariff_code")
    email = data.get("email")

    if callback_query.data == "confirm_email":
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª email: {email}")
    elif callback_query.data == "edit_email":
        await request_user_email(chat_id, bot, state)
        await state.set_state(PaymentForm.awaiting_email)
        await state.update_data(tariff_code=tariff_code, email=email)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ç–∞—Ä–∏—Ñ, –∏ email –æ–±—Ä–∞—Ç–Ω–æ –≤ state!

    await callback_query.answer()



# –¢–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è email —á–µ—Ä–µ–∑ 1 —á–∞—Å
async def start_email_timeout(chat_id: int, state: FSMContext, timeout: int = 3600):
    await asyncio.sleep(timeout)
    if await state.get_state() == PaymentForm.awaiting_email:
        await state.clear()
        logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è email —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è chat_id={chat_id}")
        #await bot.send_message(chat_id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ email –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(lambda c: c.data == 'cancel_payment')
async def handle_cancel_payment(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    bot = callback_query.message.bot

    await state.clear()
    await bot.send_message(chat_id, "–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    await show_main_menu(chat_id,bot)
    logging.info(f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: chat_id={chat_id}")

    await callback_query.answer()
