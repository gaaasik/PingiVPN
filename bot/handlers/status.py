from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup

from bot.handlers.cleanup import delete_unimportant_messages, store_message, messages_for_db, register_message_type
from bot.keyboards.inline import create_payment_button
from bot.utils.db import get_user_status
from datetime import datetime

router = Router()

def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –≤ —Å—Ç—Ä–æ–∫–µ.
    """
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)
@router.message(Command("status"))
@router.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ ‚ÑπÔ∏è")
async def cmd_status(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    bot = message.bot

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await store_message(chat_id, message.message_id, message.text, 'user')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = await get_user_status(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_data and len(user_data) == 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
        registration_date, days_since_registration, user_name, subscription_status = user_data



        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        now = datetime.now()

        # –ö–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        if subscription_status == "waiting_pending":
            status_sub_txt = f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 14 –¥–Ω–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å \n–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            keyboard = create_payment_button()

        else:
            status_sub_txt = subscription_status
            keyboard = create_payment_button()  # –ë–µ–∑ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–æ–π

        # –ü—Ä–∏–º–µ—Ä —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        status_message = (
            f"üïí –í—ã —Å –Ω–∞–º–∏ —É–∂–µ {(str(days_since_registration))} –¥–Ω–µ–π! üöÄ –ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üòé\n"
            f"–î–µ–π—Å—Ç–≤–∏–µ —Ç–∞—Ä–∏—Ñ–∞: {(days_since_registration)} –¥–Ω–µ–π \n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {(user_name)}\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: *{(status_sub_txt)}*"
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–æ–π –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        for msg in messages_for_db:
            if msg['chat_id'] == chat_id and msg['message_text'] == status_message:
                try:
                    await bot.delete_message(chat_id, msg['message_id'])
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg['message_id']}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        sent_message = await message.answer(status_message, parse_mode="Markdown", reply_markup=keyboard)

        if sent_message and sent_message.message_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await store_message(chat_id, sent_message.message_id, status_message, 'bot')
            await register_message_type(chat_id, sent_message.message_id, 'account_status', 'bot')
        else:
            print("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç message_id")

    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        error_message = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
        sent_message = await message.answer(error_message)

        if sent_message and sent_message.message_id:
            await store_message(chat_id, sent_message.message_id, error_message, 'bot')
        else:
            print("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç message_id")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        await bot.delete_message(chat_id, message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.message_id}: {e}")

    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_unimportant_messages(chat_id, bot)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@router.callback_query(lambda call: call.data == "account_info")
async def send_account_info(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º chat_id —á–µ—Ä–µ–∑ from_user.id
    message_id = callback_query.message.message_id  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    bot = callback_query.bot

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await store_message(chat_id, message_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ", 'user')

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_data = await get_user_status(chat_id)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_data and len(user_data) == 4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 4 —ç–ª–µ–º–µ–Ω—Ç–∞
        registration_date, days_since_registration, user_name, subscription_status = user_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if subscription_status == "waiting_pending":
            status_sub_txt = f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ 14 –¥–Ω–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å \n–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            reply_markup = create_payment_button()
        else:
            status_sub_txt = subscription_status
            reply_markup = None  # –ë–µ–∑ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –¥—Ä—É–≥–æ–π

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        status_message = (
            f"üïí –í—ã —Å –Ω–∞–º–∏ —É–∂–µ {days_since_registration} –¥–Ω–µ–π! üöÄ –ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üòé\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date.strftime('%d-%m-%Y')}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: *{status_sub_txt}*"
        )

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–æ–π –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        for msg in messages_for_db:
            if msg['chat_id'] == chat_id and msg['message_text'] == status_message:
                try:
                    await bot.delete_message(chat_id, msg['message_id'])
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg['message_id']}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –∏ –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        sent_message = await bot.send_message(chat_id, status_message, parse_mode="Markdown", reply_markup=reply_markup)

        if sent_message and sent_message.message_id:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            await store_message(chat_id, sent_message.message_id, status_message, 'bot')
            await register_message_type(chat_id, sent_message.message_id, 'account_status', 'bot')
        else:
            print("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç message_id")

    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        error_message = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
        sent_message = await bot.send_message(chat_id, error_message)

        if sent_message and sent_message.message_id:
            await store_message(chat_id, sent_message.message_id, error_message, 'bot')
        else:
            print("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç message_id")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message_id}: {e}")

    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_unimportant_messages(chat_id, bot)