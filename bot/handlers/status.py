# bot/handlers/status.py
from aiogram import Router, types
from aiogram.filters import Command
from bot.handlers.cleanup import delete_unimportant_messages, store_message, messages_for_db
from bot.utils.db import get_user_status
from datetime import datetime

router = Router()

@router.message(Command("status"))
@router.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ ‚ÑπÔ∏è")
async def cmd_status(message: types.Message):
    await store_message(message.chat.id, message.message_id, message.text, 'user')

    user_id = message.from_user.id
    chat_id = message.chat.id
    bot = message.bot

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_status = await get_user_status(user_id)

    if user_status:
        registration_date, user_name = user_status

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if isinstance(registration_date, str):
            registration_date = datetime.strptime(registration_date, "%Y-%m-%d %H:%M:%S.%f")

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        now = datetime.now()
        days_since_registration = (now - registration_date).days
        seconds_since_registration = (now - registration_date).total_seconds()

        traffic_used_mb = 0  # –ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 MB)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if days_since_registration == 0:
            hours_since_registration = seconds_since_registration // 3600
            minutes_since_registration = (seconds_since_registration % 3600) // 60

            if hours_since_registration > 0:
                status_message = (
                    f"üïí –í—ã —Å –Ω–∞–º–∏ —É–∂–µ **{int(hours_since_registration)} —á–∞—Å–æ–≤**! üöÄ –ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üòé\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date.strftime('%d-%m-%Y')}\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: **{traffic_used_mb} MB**"
                )
            elif minutes_since_registration > 0:
                status_message = (
                    f"üïí –í—ã —Å –Ω–∞–º–∏ —É–∂–µ **{int(minutes_since_registration)} –º–∏–Ω—É—Ç**! üöÄ –ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üòé\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date.strftime('%d-%m-%Y')}\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: **{traffic_used_mb} MB**"
                )
            else:
                status_message = (
                    f"üïí –í—ã —Å –Ω–∞–º–∏ —É–∂–µ **{int(seconds_since_registration)} —Å–µ–∫—É–Ω–¥**! üöÄ –ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üòé\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date.strftime('%d-%m-%Y')}\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
                    f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: **{traffic_used_mb} MB**"
                )
        else:
            status_message = (
                f"üïí –í—ã —Å –Ω–∞–º–∏ —É–∂–µ **{days_since_registration} –¥–Ω–µ–π**! üöÄ –ö–∞–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üòé\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date.strftime('%d-%m-%Y')}\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
                f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: **{traffic_used_mb} MB**"
            )

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º
        for msg in messages_for_db:
            if msg['chat_id'] == chat_id and msg['message_text'] == status_message:
                try:
                    await bot.delete_message(chat_id, msg['message_id'])
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg['message_id']}: {e}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_message = await message.answer(status_message, parse_mode="Markdown")
        await store_message(chat_id, sent_message.message_id, status_message, 'bot')

    else:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        error_message = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ."
        sent_message = await message.answer(error_message)
        await store_message(chat_id, sent_message.message_id, error_message, 'bot')

    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_unimportant_messages(chat_id, bot)
