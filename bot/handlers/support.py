# bot/handlers/support.py
from bot.database.db import add_user_question  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
from aiogram import Router, types
from aiogram.filters import Command
from bot.handlers.cleanup import store_message, delete_unimportant_messages, register_message_type
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()
support_message = "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è : "
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class SupportState(StatesGroup):
    waiting_for_question = State()


@router.message(Command("support"))
@router.message(lambda message: message.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üôã‚Äç‚ôÇÔ∏è")
async def cmd_support(message: types.Message, state: FSMContext):
    await store_message(message.chat.id, message.message_id, message.text, 'user')
    chat_id = message.chat.id
    user_id = message.from_user.id
    bot = message.bot
    await state.set_state(SupportState.waiting_for_question)

    response = await message.answer(text=support_message
                                    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await store_message(response.chat.id, response.message_id, response.text, 'bot')
    await register_message_type(chat_id, response.message_id, 'support_message', 'bot')
    current_state = await state.get_state()
    print(f"Current state: {current_state}")  # –î–æ–±–∞–≤—å—Ç–µ –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ —É–¥–∞–ª—è—Ç—å
    if response:
        await store_message(chat_id, response.message_id, support_message, 'bot')
        await register_message_type(chat_id, response.message_id, 'share_friends',
                                    'bot')  # –û—Å—Ç–∞–≤–ª—è–µ–º await, —Ç.–∫. —Ñ—É–Ω–∫—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
    else:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: message.answer –≤–µ—Ä–Ω—É–ª None")

    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_unimportant_messages(chat_id, bot)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(SupportState.waiting_for_question)
async def process_user_question(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_user_question(message.chat.id, message.from_user.id, message.text)
    username = message.from_user.username or str(message.from_user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await store_message(message.chat.id, message.message_id, message.text, 'user')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation_message = await message.answer(f"–í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω \n\n {message.text} \n\n –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
    await register_message_type(confirmation_message.chat.id, confirmation_message.message_id, 'question_from_user', 'bot')
    await store_message(confirmation_message.chat.id, confirmation_message.message_id, confirmation_message.text, 'bot')
    await message.bot.send_message(
        chat_id=456717505,  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: @{username} (ID —á–∞—Ç–∞: {message.chat.id}) \n –ó–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: {message.text}"
    )
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    await state.clear()

    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_unimportant_messages(message.chat.id, message.bot)
