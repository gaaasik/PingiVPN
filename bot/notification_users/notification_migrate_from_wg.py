import json
from datetime import datetime

import aiosqlite
from aiogram import types, Bot, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
import logging

from bot.keyboards.inline import main_menu_inline_keyboard
from bot.handlers.all_menu.main_menu import show_main_menu
from bot.keyboards.reply import reply_keyboard_main_menu
from bot.payments2.payments_handler_redis import db_path

logger = logging.getLogger(__name__)
router = Router()
# –û—Å–Ω–æ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
async def send_initial_update_notification(chat_id: int, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text = (
            "üö® *–£ –Ω–∞—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!* üö®\n\n"
            "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª *VLESS* —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã.\n\n"
            "‚öôÔ∏è *–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å*\n"
            "üõ°Ô∏è *–ó–∞—â–∏—Ç–∞ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å*\n"
            "üìà *–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å*\n"
            "üì≤ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏!"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_keyboard_main_menu, parse_mode="Markdown")

        # –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await log_notification(chat_id, "transition_to_vless", "sent")
        logger.info(f"–û—Å–Ω–æ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –í—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async def send_choice_notification(chat_id: int, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ç–æ—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.
    """
    try:
        # –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        choice_text = (
            f"üö® –£–ª—É—á—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∂–¥–∞–ª–∏!\n\n"
            f"–ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Ö–æ–¥–∏–º –æ—Ç *WireGuard*, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ, –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ –±–ª–æ–∫–∏—Ä—É—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.\n\n"
            f"üì≤ –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á *VLESS* –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –í–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω üéÅ *–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 7 –¥–Ω–µ–π*.\n\n"
        )

        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
        choice_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ VLESS", callback_data="connect_vpn")],
                [InlineKeyboardButton(text="‚ö†Ô∏è –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ WireGuard", callback_data="stay_on_wg")]
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        await bot.send_message(chat_id=chat_id, text=choice_text, reply_markup=choice_keyboard, parse_mode="Markdown")
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—É
async def log_notification(chat_id: int, notification_type: str, status: str = "sent"):
    async with aiosqlite.connect(db_path) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è chat_id
        async with db.execute("SELECT notification_data FROM notifications WHERE chat_id = ?", (chat_id,)) as cursor:
            result = await cursor.fetchone()
            notification_data = json.loads(result[0]) if result else {}

        # –û–±–Ω–æ–≤–ª—è–µ–º JSON —Å –Ω–æ–≤—ã–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
        notification_data[notification_type] = {
            "status": status,
            "sent_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–∑—É
        if result:
            await db.execute("UPDATE notifications SET notification_data = ? WHERE chat_id = ?",
                             (json.dumps(notification_data), chat_id))
        else:
            await db.execute("INSERT INTO notifications (chat_id, notification_data) VALUES (?, ?)",
                             (chat_id, json.dumps(notification_data)))

        await db.commit()

async def increment_stay_on_wg_click(chat_id: int):
    """–§—É–Ω–∫—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ '–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ WireGuard' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute("SELECT notification_data FROM notifications WHERE chat_id = ?", (chat_id,)) as cursor:
            result = await cursor.fetchone()
            notification_data = json.loads(result[0]) if result else {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Ä–∞–Ω–µ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ
        if notification_data.get("stay_on_wg_clicked", {}).get("status") == "clicked":
            return  # –ï—Å–ª–∏ —É–∂–µ –Ω–∞–∂–∞—Ç–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        # –û–±–Ω–æ–≤–ª—è–µ–º JSON, –¥–æ–±–∞–≤–ª—è—è –æ—Ç–º–µ—Ç–∫—É –æ –Ω–∞–∂–∞—Ç–∏–∏
        notification_data["stay_on_wg_clicked"] = {
            "status": "clicked",
            "clicked_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–∑—É
        if result:
            await db.execute("UPDATE notifications SET notification_data = ? WHERE chat_id = ?",
                             (json.dumps(notification_data), chat_id))
        else:
            await db.execute("INSERT INTO notifications (chat_id, notification_data) VALUES (?, ?)",
                             (chat_id, json.dumps(notification_data)))

        await db.commit()
async def get_stay_on_wg_count():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ '–û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ WireGuard'."""
    async with aiosqlite.connect(db_path) as db:
        async with db.execute("SELECT notification_data FROM notifications") as cursor:
            results = await cursor.fetchall()
            return sum(1 for row in results if json.loads(row[0]).get("stay_on_wg_clicked", {}).get("status") == "clicked")
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞
@router.callback_query(lambda c: c.data in ["stay_on_wg"])
async def handle_choice_callback(callback_query: types.CallbackQuery):
    bot = callback_query.bot
    chat_id = callback_query.message.chat.id

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await increment_stay_on_wg_click(chat_id)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –æ—Å—Ç–∞—Ç—å—Å—è –Ω–∞ WireGuard
    warning_text = (
        f"‚ö†Ô∏è –û—Å—Ç–∞—Ç—å—Å—è –Ω–∞ WireGuard *–Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è*, –ø—Ä–æ–≤–∞–π–¥–µ—Ä *–∞–∫—Ç–∏–≤–Ω–æ* –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
        f"–ó–∞—á–µ–º –∂–¥–∞—Ç—å –ø—Ä–æ–±–ª–µ–º?\n–° *VLESS* —É –≤–∞—Å –±—É–¥–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã VPN."
    )

    # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    second_choice_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ VLESS", callback_data="connect_vpn")]

        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤—Ç–æ—Ä—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await bot.send_message(chat_id=chat_id, text=warning_text, reply_markup=second_choice_keyboard, parse_mode="Markdown")
    await callback_query.answer()
