# import asyncio
# import logging
# import json
# import os
# from datetime import datetime
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# import aiosqlite
#
# from bot.handlers.admin import send_admin_log, ADMIN_CHAT_IDS
# from bot.notification_users.notification_migrate_from_wg import log_notification
# from models.UserCl import UserCl
#
# # –õ–æ–≥–≥–µ—Ä
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
#
# # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# DB_PATH = os.getenv('database_path_local')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# BATCH_SIZE = 50  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
#
#
# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø–ª–∞—Ç—ã
# def get_payment_keyboard() -> InlineKeyboardMarkup:
#     return InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–ª—é—á", callback_data="buy_vpn")],
#             [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
#         ]
#     )
#
#
# # # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
# # async def process_notifications_request_payment(bot):
# #     """
# #     –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–ª–∞—Ç—ã:
# #     1. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
# #     2. –î–µ–ª–∏—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –±–∞—Ç—á–∏.
# #     3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å.
# #     """
# #     await asyncio.sleep(1)
# #     logging.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–ª–∞—Ç—ã.")
# #
# #     users_to_notify, users_skipped = await find_users_for_notification()
# #     # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ –ø–µ—Ä–≤—ã—Ö 1100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# #     users_to_notify = users_to_notify[:500]
# #
# #     logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_to_notify)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
# #     logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ {len(users_skipped)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö.")
# #
# #     errors = {}
# #
# #     async def send_batch(batch):
# #         await asyncio.gather(*[send_notification_to_user(bot, chat_id, errors) for chat_id in batch])
# #
# #     for i in range(0, len(users_to_notify), BATCH_SIZE):
# #         batch = users_to_notify[i:i + BATCH_SIZE]
# #         await send_batch(batch)
# #
# #     # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
# #     logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {len(users_to_notify) - len(errors)}.")
# #     logging.info(f"–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {len(errors)}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {errors}")
#
# from datetime import datetime
# import logging
#
# #
# # async def find_users_for_notification():
# #     """
# #     –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–∏–º –ø–µ—Ä–∏–æ–¥–æ–º –∫–ª—é—á–∞.
# #     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞: –∫–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∫–æ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
# #     """
# #     current_time = datetime.now()
# #     users_to_notify = []
# #     users_skipped = []
# #
# #     # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
# #     user_ids = await UserCl.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ chat_id
# #     for user_id in user_ids:
# #         try:
# #             # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# #             us = await UserCl.load_user(user_id)
# #             if not us:
# #                 logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
# #                 users_skipped.append(user_id)
# #                 continue
# #
# #             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# #             if not us.servers:
# #                 logging.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us.chat_id} –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.")
# #                 users_skipped.append(us.chat_id)
# #                 continue
# #
# #             # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–ª—é—á–∞
# #             date_key_off = await us.servers[0].date_key_off.get()
# #
# #             if date_key_off:
# #                 # –ï—Å–ª–∏ `date_key_off` —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ—ë –≤ –æ–±—ä–µ–∫—Ç `datetime`
# #                 if isinstance(date_key_off, str):
# #                     try:
# #                         date_key_off = datetime.strptime(date_key_off, "%d.%m.%Y %H:%M:%S")
# #                     except ValueError as e:
# #                         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us.chat_id}: {e}")
# #                         users_skipped.append(us.chat_id)
# #                         continue
# #
# #                 # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
# #                 if date_key_off < current_time:
# #                     users_to_notify.append(us.chat_id)
# #                 else:
# #                     users_skipped.append(us.chat_id)
# #             else:
# #                 #logging.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {us.chat_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–ª—é—á–∞.")
# #                 users_skipped.append(us.chat_id)
# #
# #         except Exception as e:
# #             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
# #             users_skipped.append(user_id)
# #     print(len(users_to_notify), "users_skipped = ", len(users_skipped))
# #     return users_to_notify, users_skipped
# #
#
#
#
# # async def send_notification_to_user(bot, chat_id, errors, notification_type="request_payment2"):
# #     """
# #     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ log_notification.
# #     """
# #     try:
# #         # –°–æ–æ–±—â–µ–Ω–∏–µ
# #         text = (
# #             "‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
# #             "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n"
# #             "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
# #         )
# #         keyboard = get_payment_keyboard()
# #
# #         # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
# #
# #         await bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode="HTML")
# #         logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
# #
# #         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
# #         await log_notification(chat_id, notification_type, status="sent")
# #
# #     except Exception as e:
# #         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
# #         error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}"
# #         logging.error(f"{error_message} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
# #         errors[chat_id] = error_message
# #
# #         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑–µ
# #         await log_notification(chat_id, notification_type, status="error")
# #
#
