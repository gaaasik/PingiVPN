import os
import asyncio
import json
import logging
import redis.asyncio as redis
from dotenv import load_dotenv

from bot.handlers.admin import send_admin_log
from bot_instance import bot
from models.UserCl import UserCl

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("main_server_task_processor.log"),
        logging.StreamHandler()
    ]
)

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
REDIS_HOST = os.getenv('ip_redis_server')  # IP-–∞–¥—Ä–µ—Å Redis   queue_results_task
REDIS_PORT = int(os.getenv('port_redis'))  # –ü–æ—Ä—Ç Redis
REDIS_PASSWORD = os.getenv('password_redis')  # –ü–∞—Ä–æ–ª—å Redis (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
NAME_RESULT_QUEUE = "queue_result_task"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Redis
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, decode_responses=True)

async def process_task(task):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏."""
    try:
        logging.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏.")
        task_data = json.loads(task)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {task_data}")

        if task_data.get("status") == "success":
            logging.info(f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task_data}")
        elif task_data.get("status") == "error":
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_data}")
        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_data}")
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
    finally:
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏.")

async def process_queue_results_task():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ Redis."""
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ tasks")
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            task_data = await redis_client.lpop(NAME_RESULT_QUEUE)
            if task_data:
                try:
                    task = json.loads(task_data)
                    logging.info(f"–ó–∞–¥–∞—á–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {task}")
                except json.JSONDecodeError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {task_data}")
                    continue


                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                await process_updata_traffic(json.dumps(task))
            else:
                await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        except redis.ConnectionError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis: {e}")
            await asyncio.sleep(5)

async def process_updata_traffic(json_task):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞—Ñ–∏–∫–µ."""
    try:
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: process_updata_traffic")
        data = json.loads(json_task)
        logging.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        status = data.get('status')
        chat_id = data.get('chat_id')
        user_ip = data.get('user_ip')
        disabled = data.get('disabled')
        transfer_received = data.get('transfer_received')
        transfer_sent = data.get('transfer_sent')
        latest_handshake = data.get('latest_handshake')

        us = await UserCl.load_user(chat_id)

        if data.get('enable') == None:
            await send_admin_log(bot, f"üòà–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ù–ï –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–µ–π—á–∞—Å {us.active_server.enable.get()}, –∞ –ø—Ä–∏—à–ª–æ NONE status={status}")
        else:
            enable = data.get('enable')
            await send_admin_log(bot, f"üòà–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ {enable}, status={status}")





        # if not all([chat_id, user_ip]):
        #     logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON: {data}")
        #     return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç



        us = await UserCl.load_user(chat_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã "no_parameter"
        if enable != "no_parameter" and enable != None:
            logging.info(f"–ó–∞–ø—É—Å–∫ set_enable_admin –∏–∑ process_updata_traffic!!!!!!!!!!!!")
            await us.active_server.enable.set_enable_admin(enable)
        else:
            logging.info("enable –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'no_parameter', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

        if latest_handshake != "no_parameter":
            await us.active_server.date_latest_handshake.set(latest_handshake)
        else:
            logging.info("latest_handshake –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'no_parameter', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

        if transfer_received != "no_parameter":
            await us.active_server.traffic_up.set(transfer_received)
        else:
            logging.info("transfer_received –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'no_parameter', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

        if transfer_sent != "no_parameter":
            await us.active_server.traffic_down.set(transfer_sent)
        else:
            logging.info("transfer_sent –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'no_parameter', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

    except json.JSONDecodeError as e:
        logging.info(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {json_task}")
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ: {e}")

