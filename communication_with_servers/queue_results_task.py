import os
import asyncio
import json
import logging
import redis.asyncio as redis
from dotenv import load_dotenv

from bot.handlers.admin import send_admin_log
from bot_instance import bot
from models.UserCl import UserCl

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("main_server_task_processor.log"),
        logging.StreamHandler()
    ]
)

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
REDIS_HOST = os.getenv('ip_redis_server')  # IP-–∞–¥—Ä–µ—Å Redis
REDIS_PORT = int(os.getenv('port_redis'))  # –ü–æ—Ä—Ç Redis
REDIS_PASSWORD = os.getenv('password_redis')  # –ü–∞—Ä–æ–ª—å Redis (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
NAME_RESULT_QUEUE = "queue_result_task"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Redis
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, decode_responses=True)

async def process_task(task):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏."""
    try:
        logging.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏.")
        task_data = json.loads(task)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {task_data}")

        if task_data.get("status") == "success":
            logging.info(f"–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task_data}")
        elif task_data.get("status") == "error":
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_data}")
        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {task_data}")
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
    finally:
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏.")

async def process_queue_results_task():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ Redis."""
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ tasks")
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            task_data = await redis_client.lpop(NAME_RESULT_QUEUE)
            if task_data:
                logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–∑ Redis: {task_data}")
                try:
                    task = json.loads(task_data)
                    logging.info(f"–ó–∞–¥–∞—á–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {task}")
                except json.JSONDecodeError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {task_data}")
                    continue


                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
                await process_updata_traffic(json.dumps(task))
            else:
                await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        except redis.ConnectionError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            await asyncio.sleep(5)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis: {e}")
            await asyncio.sleep(5)

async def process_updata_traffic(json_task):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Redis —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞—Ñ–∏–∫–µ."""
    try:
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: process_updata_traffic")
        data = json.loads(json_task)
        logging.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        status = data.get('status')
        chat_id = data.get('chat_id')
        user_ip = data.get('user_ip')
        enable = data.get('enable')
        disabled = data.get('disabled')
        transfer_received = data.get('transfer_received')
        transfer_sent = data.get('transfer_sent')
        latest_handshake = data.get('latest_handshake')


        await send_admin_log(bot,f"üòà–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∏–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ {enable}, status={status}")

        if not all([chat_id, user_ip]):
            logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ JSON: {data}")
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

        print("–î–∞–Ω–Ω—ã–µ —Å queue_result_task")
        print("status = ", status)
        print("user_ip = ", user_ip)
        print("transfer_received = ", transfer_received)
        print("transfer_sent = ", transfer_sent)
        print("latest_handshake = ", latest_handshake)
        print("chat_id = ", chat_id)
        print("disabled = ", disabled)
        print("enable = ", enable)

        us = await UserCl.load_user(chat_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã "no_parameter"
        if latest_handshake != "no_parameter":
            await us.active_server.date_latest_handshake.set(latest_handshake)
        else:
            logging.info("latest_handshake –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'no_parameter', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

        if transfer_received != "no_parameter":
            await us.active_server.traffic_up.set(transfer_received)
        else:
            logging.info("transfer_received –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'no_parameter', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

        if transfer_sent != "no_parameter":
            await us.active_server.traffic_down.set(transfer_sent)
        else:
            logging.info("transfer_sent –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'no_parameter', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")

    except json.JSONDecodeError as e:
        logging.info(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}, –¥–∞–Ω–Ω—ã–µ: {json_task}")
    except Exception as e:
        logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞—Ñ–∏–∫–µ: {e}")

# async def process_queue_results_task():
#     logging.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...")
#
#     redis = None
#     try:
#         # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
#         redis = await aioredis.from_url(
#             f"redis://{REDIS_HOST}:{REDIS_PORT}",
#             password=REDIS_PASSWORD,
#             decode_responses=True
#         )
#
#
#         while True:
#             try:
#                 logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis...")
#
#                 task = await asyncio.to_thread(redis.lpop, NAME_RESULT_QUEUE)
#
#                 if task:
#                     _, task_data = task
#                     await process_task(task_data)
#                 else:
#                     logging.info("–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
#
#             except asyncio.CancelledError:
#                 logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º...")
#                 break
#             except aioredis.ConnectionError as e:
#                 logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
#                 await asyncio.sleep(5)  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
#             except Exception as e:
#                 logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
#     except GeneratorExit as ge:
#         logging.error(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {ge}")
#     except Exception as e:
#         logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
#     finally:
#         if redis:
#             try:
#                 # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
#                 await redis.close()
#                 logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")
#             except Exception as close_error:
#                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Redis: {close_error}")
#
#









# async def process_queue_results_task():
#     logging.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏...")
#
#     redis = None
#     try:
#         # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
#         redis = await aioredis.from_url(
#             f"redis://{REDIS_HOST}:{REDIS_PORT}",
#             password=REDIS_PASSWORD,
#             decode_responses=True
#         )
#
#         while True:
#             try:
#                 logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis...")
#                 task = await redis.lpop(NAME_RESULT_QUEUE, timeout=5)
#                 if task:
#                     _, task_data = task
#                     await process_task(task_data)
#                 else:
#                     logging.info("–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
#
#             except asyncio.CancelledError:
#                 logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º...")
#                 break
#             except aioredis.ConnectionError as e:
#                 logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
#                 await asyncio.sleep(5)  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
#             except Exception as e:
#                 logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
#     except GeneratorExit as ge:
#         logging.error(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {ge}")
#     except Exception as e:
#         logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
#     finally:
#         if redis:
#             try:
#                 # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
#                 await redis.close()
#                 logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")
#             except Exception as close_error:
#                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Redis: {close_error}")




















# import asyncio
# import aiohttp
# import aioredis
# import json
# import logging
# from asyncio import Semaphore
#
# logging.basicConfig(level=logging.INFO)
# logger = logging.getLogger(__name__)
#
# REDIS_QUEUE_NAME = "send_3x_ui"
# REDIS_URL = "redis://localhost:6379"
# CHECK_INTERVAL_NO_TASKS = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–∞—á (5 –º–∏–Ω—É—Ç)
# CHECK_INTERVAL_WITH_TASKS = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∑–∞–¥–∞—á (5 —Å–µ–∫—É–Ω–¥)
# SHORT_CHECK_INTERVAL = 2  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 2 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞—á
# RETRY_INTERVAL_SHORT = 10  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
# RETRY_INTERVAL_LONG = 300  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ 12 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
# MAX_RETRIES = 12  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–∏
# MAX_TASKS_PER_CYCLE = 100  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –ø–∞–∫–µ—Ç
# MAX_CONCURRENT_REQUESTS = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
#
#
# async def is_server_available(server_ip):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ server_ip."""
#     url = f"http://{server_ip}:6222/api/update-enable"
#     try:
#         async with aiohttp.ClientSession() as session:
#             async with session.get(url, timeout=5) as response:
#                 return response.status == 200
#     except (aiohttp.ClientConnectionError, aiohttp.ServerDisconnectedError, asyncio.TimeoutError):
#         return False
#
#
# async def send_json_to_3xui(data, semaphore):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –Ω–∞ —Å–µ—Ä–≤–µ—Ä 3x-ui —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ server_ip."""
#     server_ip = data.get("server_ip")
#     url = f"http://{server_ip}:6222/api/update-enable"
#     headers = {"Content-Type": "application/json"}
#     timeout = aiohttp.ClientTimeout(total=20)
#
#     async with semaphore:
#         try:
#             async with aiohttp.ClientSession(timeout=timeout) as session:
#                 async with session.post(url, json=data, headers=headers) as response:
#                     if response.status == 200:
#                         logger.info(f"JSON —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_ip}.")
#                         return True
#                     else:
#                         logger.error(
#                             f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_ip}: {response.status}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {await response.text()}")
#                         return False
#         except aiohttp.ClientConnectionError:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server_ip}.")
#             return False
#         except aiohttp.ServerDisconnectedError:
#             logger.error(f"–°–µ—Ä–≤–µ—Ä {server_ip} —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
#             return False
#         except asyncio.TimeoutError:
#             logger.error("–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º-–∞—É—Ç—É.")
#             return False
#         except aiohttp.ClientError as e:
#             logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ JSON: {e}")
#             return False
#
#
# async def process_task_queue():
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ Redis —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π."""
#     redis = aioredis.from_url(REDIS_URL, db=1)
#     retries = 0  # –°—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
#     semaphore = Semaphore(MAX_CONCURRENT_REQUESTS)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
#
#     try:
#         while True:
#             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏ Redis –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
#             queue_length = await redis.llen(REDIS_QUEUE_NAME)
#             check_interval = SHORT_CHECK_INTERVAL if queue_length > 50 else CHECK_INTERVAL_WITH_TASKS
#
#             if queue_length > 0:
#                 # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å server_ip –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
#                 task_json = await redis.lpop(REDIS_QUEUE_NAME)
#                 if task_json:
#                     task_data = json.loads(task_json)
#                     server_ip = task_data.get("server_ip")
#
#                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º retries
#                     if retries == 0 or await is_server_available(server_ip):
#                         logger.info(f"–°–µ—Ä–≤–µ—Ä {server_ip} –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞—á.")
#                         retries = 0  # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
#
#                         # –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á —Å —Ç–µ–º –∂–µ server_ip
#                         tasks_to_send = [task_data]
#                         for _ in range(min(queue_length, MAX_TASKS_PER_CYCLE - 1)):
#                             task_json = await redis.lpop(REDIS_QUEUE_NAME)
#                             if task_json:
#                                 next_task_data = json.loads(task_json)
#                                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ server_ip —Å–æ–≤–ø–∞–¥–∞–µ—Ç
#                                 if next_task_data.get("server_ip") == server_ip:
#                                     tasks_to_send.append(next_task_data)
#                                 else:
#                                     # –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π server_ip, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∏ –≤—ã—Ö–æ–¥–∏–º
#                                     await redis.lpush(REDIS_QUEUE_NAME, task_json)
#                                     break
#
#                         # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ server_ip
#                         logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç –∏–∑ {len(tasks_to_send)} –∑–∞–¥–∞—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_ip}.")
#                         send_tasks = [send_json_to_3xui(task, semaphore) for task in tasks_to_send]
#                         results = await asyncio.gather(*send_tasks)
#
#                         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
#                         if not all(results):
#                             retries = 1
#                             logger.info(
#                                 f"–ù–µ—É–¥–∞—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä {server_ip}. –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ {RETRY_INTERVAL_SHORT} —Å–µ–∫—É–Ω–¥.")
#                             await asyncio.sleep(RETRY_INTERVAL_SHORT)
#
#                     else:
#                         # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç
#                         # —É–ø–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
#                         if retries < MAX_RETRIES:
#                             retries += 1
#                             logger.warning(
#                                 f"–°–µ—Ä–≤–µ—Ä {server_ip} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ {retries}/{MAX_RETRIES}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {RETRY_INTERVAL_SHORT} —Å–µ–∫—É–Ω–¥.")
#                             await asyncio.sleep(RETRY_INTERVAL_SHORT)
#                         else:
#                             logger.warning(
#                                 f"–°–µ—Ä–≤–µ—Ä {server_ip} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–æ–ª–≥–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (5 –º–∏–Ω—É—Ç).")
#                             await asyncio.sleep(RETRY_INTERVAL_LONG)
#
#             else:
#                 # –ï—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
#                 logger.info("–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
#                 await asyncio.sleep(CHECK_INTERVAL_NO_TASKS)
#
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
#     finally:
#         await redis.close()
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
# #
# # logging.basicConfig(level=logging.INFO)
# # logger = logging.getLogger(__name__)
# #
# #
# # async def send_json_to_3xui(data):
# #     url = "http://194.87.208.18:6222/api/update-enable"
# #     headers = {"Content-Type": "application/json"}
# #     timeout = aiohttp.ClientTimeout(total=20)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –≤ 10 —Å–µ–∫—É–Ω–¥
# #
# #     logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON –Ω–∞ —Å–µ—Ä–≤–µ—Ä 3x-ui...")
# #
# #     try:
# #         async with aiohttp.ClientSession(timeout=timeout) as session:
# #             async with session.post(url, json=data, headers=headers) as response:
# #                 if response.status == 200:
# #                     logger.info("JSON —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä 3x-ui.")
# #                 else:
# #                     error_text = await response.text()
# #                     logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON: {response.status}. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_text}")
# #     except aiohttp.ClientConnectorError as e:
# #         logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É 3x-ui. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.")
# #         logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
# #     except aiohttp.ClientOSError as e:
# #         logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º 3x-ui.")
# #         logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {e}")
# #     except asyncio.TimeoutError:
# #         logger.error("–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º-–∞—É—Ç—É.")
# #     except Exception as e:
# #         logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ JSON: {e}")
# #
# # # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# #
# #
# #
# # async def process_task_queue():
# #     """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ Redis –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä 3x-ui."""
# #     redis = aioredis.from_url("redis://localhost", db=1)
# #
# #     try:
# #         while True:
# #             # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
# #             logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ Redis.")
# #
# #             task_json = await redis.lpop("send_3x_ui")
# #             if task_json:
# #                 task_data = json.loads(task_json)
# #
# #                 # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
# #                 logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_data}")
# #
# #                 await send_json_to_3xui(task_data)
# #             else:
# #                 # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
# #                 logger.info("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
# #
# #                 await asyncio.sleep(5)
# #     except Exception as e:
# #         # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏
# #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")
# #     finally:
# #         await redis.close()
