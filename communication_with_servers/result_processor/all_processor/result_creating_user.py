import json
import asyncio
import logging
import os

import aioredis
from datetime import datetime
from pathlib import Path

from dotenv import load_dotenv

from bot.admin_func.history_key.moving_wg_files import generate_qr_code
from bot.handlers.admin import send_admin_log
from bot_instance import bot
from communication_with_servers.result_processor.all_processor.base_processor import BaseResultProcessor


load_dotenv()
# üìå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å URL
URL_FILE_PATH = Path("configs/url_vless_new")
REDIS_KEY = "daily_created_users"  # üî• –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis
CONFIGS_DIR = os.getenv('CONFIGS_DIR')
BASE_CONFIGS_DIR = os.path.join(CONFIGS_DIR, 'base_configs')

class ResultCreateUsers(BaseResultProcessor):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π VLESS."""

    async def process(self, task_data: dict):
        """
        üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {task_data}")

        status = task_data.get("status", "error")
        server_name = task_data.get("server_name", "unknown")
        protocol = task_data.get("protocol", "unknown")
        server_ip = task_data.get("server_ip", "unknown")
        count_users = task_data.get("count_users", 0)


        if status == "success":

            logging.info(f"üìå –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {count_users}")

            if protocol == "wireguard":
                all_users = task_data.get("created_users", [])
                await self.append_files_wg_to_user(all_users)
                message = f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {count_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π WG {all_users}"
            # üìå –î–æ–±–∞–≤–ª—è–µ–º URL –≤ —Ñ–∞–π–ª –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ Redis
            elif protocol == "vless":

                all_urls = task_data.get("all_urls", [])
                await self.append_urls_to_file(all_urls)
                message = f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {count_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\nüîó –°—Å—ã–ª–∫–∏ –Ω–∞ VLESS:\n" + "\n".join(all_urls)
            #await self.increment_user_count(count_users)

        else:
            message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n{task_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ result_create_users")
            await send_admin_log(bot,f"result_creating_user \n{message}")

        # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ–º
        logging.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {message}")

    async def append_files_wg_to_user(self, all_users):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç .conf –∏ QR-—Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è WireGuard,
        –µ—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        """
        try:
            Path(BASE_CONFIGS_DIR).mkdir(parents=True, exist_ok=True)

            for user in all_users:
                required_fields = [
                    "name", "private_key", "address", "dns",
                    "server_public_key", "pre_shared_key", "endpoint"
                ]

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –ø—É—Å—Ç—ã–µ
                missing = [field for field in required_fields if not user.get(field)]
                if missing:
                    logging.error(
                        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('name', 'unknown')}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {missing}")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                name = user["name"]
                conf_path = Path(BASE_CONFIGS_DIR) / f"{name}.conf"
                qr_path = Path(BASE_CONFIGS_DIR) / f"{name}.png"

                conf_content = f"""[Interface]
PrivateKey = {user["private_key"]}
Address = {user["address"]}/24
DNS = {user["dns"]}

[Peer]
PublicKey = {user["server_public_key"]}
PresharedKey = {user["pre_shared_key"]}
AllowedIPs = 0.0.0.0/0, ::/0
PersistentKeepalive = 0
Endpoint = {user["endpoint"]}
    """

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º .conf
                with open(conf_path, "w", encoding="utf-8") as f:
                    f.write(conf_content)
                logging.info(f"üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {conf_path}")

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
                await generate_qr_code(conf_path, qr_path)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏–ª–∏ QR-–∫–æ–¥–æ–≤: {e}")

    async def append_urls_to_file(self, urls: list):
        """
        üìå –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ URL –≤ —Ñ–∞–π–ª `url_vless_new`, –Ω–æ **–ù–ï** —Ö—Ä–∞–Ω–∏—Ç —á–∏—Å–ª–æ.
        """
        try:
            if not URL_FILE_PATH.exists():
                URL_FILE_PATH.touch()

            async with asyncio.Lock():  # üîí –ë–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                with open(URL_FILE_PATH, "a", encoding="utf-8") as f:
                    for url in urls:
                        f.write(url + "\n")

            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(urls)} –Ω–æ–≤—ã—Ö URL –≤ {URL_FILE_PATH}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ URL –≤ —Ñ–∞–π–ª: {e}")

    async def increment_user_count(self, count_users: int):
        """
        üî• –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis.
        """
        try:
            redis = await aioredis.from_url("redis://localhost")
            await redis.incrby(REDIS_KEY, count_users)
            await redis.close()
            logging.info(f"üìà –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ {count_users}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis: {e}")

    async def reset_daily_count(self):
        """
        üïõ –í 1:00 –Ω–æ—á–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Redis.
        """
        try:
            redis = await aioredis.from_url("redis://localhost")
            await redis.set(REDIS_KEY, 0)
            await redis.close()
            logging.info("üîÑ –î–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω –≤ Redis")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞ –≤ Redis: {e}")

    async def get_daily_count(self) -> int:
        """
        üìä –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
        """
        try:
            redis = await aioredis.from_url("redis://localhost")
            count = await redis.get(REDIS_KEY)
            await redis.close()
            return int(count) if count else 0
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∏–∑ Redis: {e}")
            return 0