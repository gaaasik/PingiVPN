import asyncio
import json
import logging
import os
import traceback
from datetime import datetime
from typing import List
import random

import aiosqlite
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from models.notifications.NotificationBaseCL import NotificationBase
from bot.handlers.admin import send_admin_log
from bot_instance import bot


class AccessExpiredReminder(NotificationBase):

    async def fetch_target_users(self) -> List[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º,
        —É –∫–æ—Ç–æ—Ä—ã—Ö date_key_off –æ—Ç 1 –¥–æ 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç.
        """
        query = """
        SELECT uk.chat_id
        FROM users_key uk
        JOIN users u ON u.chat_id = uk.chat_id
        WHERE uk.value_key IS NOT NULL
          AND uk.value_key != ''
          AND json_valid(uk.value_key) = 1
          AND json_extract(uk.value_key, '$[0].date_key_off') IS NOT NULL
          AND json_extract(uk.value_key, '$[0].date_key_off') != ''
          AND IFNULL(u.active_chat, 1) = 1
          AND date(
                substr(json_extract(uk.value_key, '$[0].date_key_off'), 7, 4) || '-' ||
                substr(json_extract(uk.value_key, '$[0].date_key_off'), 4, 2) || '-' ||
                substr(json_extract(uk.value_key, '$[0].date_key_off'), 1, 2)
          ) BETWEEN date('now', '-5 days') AND date('now', '-1 days');
        """

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query) as cursor:
                    rows = await cursor.fetchall()
                    target_users = [row[0] for row in rows]

            await send_admin_log(bot, f"üìå –ù–∞–π–¥–µ–Ω–æ {len(target_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç—ë–∫—à–∏–º –¥–æ—Å—Ç—É–ø–æ–º (1‚Äì5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥).")
            return target_users

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            logging.error(traceback.format_exc())
            return []

    def get_message_template(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ 5 –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö.
        """
        templates = [
            "üò¢ <b>–ú—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É VPN</b>\n\n"
            "–ù–æ —Ö–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –≤ 1 –∫–ª–∏–∫!\n"
            "–í–µ—Ä–Ω–∏—Ç–µ—Å—å ‚Äî –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. üß°",

            "‚ö° <b>VPN –∂–¥—ë—Ç –≤–∞—Å!</b>\n\n"
            "–ó–∞–±—É–¥—å—Ç–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö. YouTube, Instagram, TikTok ‚Äî –≤—Å—ë —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å VPN.\n"
            "–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∑–∞ 1 –º–∏–Ω—É—Ç—É. üöÄ",

            "üéÅ <b>–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ø–æ–¥–∞—Ä–æ–∫!</b>\n\n"
            "–ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –¥–æ—Å—Ç—É–ø–∞. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —à–∞–≥–æ–≤. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üéâ",

            "üåç <b>–í–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –≤–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞</b>\n\n"
            "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞.",

            "ü¶∏ <b>–í—ã —Ç—É—Ç –±–µ–∑ VPN?</b>\n\n"
            "–°–∫–æ—Ä–æ—Å—Ç—å, –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, 4K –≤–∏–¥–µ–æ ‚Äî –≤—Å—ë –≤–µ—Ä–Ω—ë—Ç—Å—è, –µ—Å–ª–∏ –Ω–∞–∂–º—ë—Ç–µ –ø–∞—Ä—É –∫–Ω–æ–ø–æ–∫.\n"
            "–ù–µ –∂–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ ‚Äî –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞—Ä–∞–Ω–µ–µ! üîê"
        ]

        return random.choice(templates)

    def get_keyboard(self) -> InlineKeyboardMarkup:
        buttons = [
            [InlineKeyboardButton(text="üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy_vpn")],
            [InlineKeyboardButton(text="üß© –†–æ–∑—ã–≥—Ä—ã—à", callback_data="lottery_entry"),
             InlineKeyboardButton(text="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")],
            [InlineKeyboardButton(text="üîó –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å –¥—Ä—É–≥–æ–º", callback_data="show_referral_link")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def after_send_success(self, user_id: int):
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É notifications.
        """
        today = datetime.now().strftime("%m_%d")
        notification_type = f"access_expired_reminder_{today}"

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                query = "SELECT notification_data FROM notifications WHERE chat_id = ?"
                async with db.execute(query, (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    notification_data = json.loads(row[0]) if row and row[0] else {}

                notification_data[notification_type] = {
                    "sent_at": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                    "status": "sent",
                    "message_type": "access_expired"
                }

                update_query = "UPDATE notifications SET notification_data = ? WHERE chat_id = ?"
                await db.execute(update_query, (json.dumps(notification_data), user_id))
                await db.commit()

            logging.info(f"‚úÖ AccessExpiredReminder –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ after_send_success –¥–ª—è {user_id}: {e}")
