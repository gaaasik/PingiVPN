import json
import logging
import os
import random
import traceback
from datetime import datetime
from typing import List

import aiosqlite
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from models.notifications.NotificationBaseCL import NotificationBase
from bot.handlers.admin import send_admin_log
from bot_instance import bot


class WithoutKeyNotification(NotificationBase):
    async def fetch_target_users(self) -> List[int]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç VPN-–∫–ª—é—á–∞ (value_key –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π).
        """
        query = """
        SELECT u.chat_id
        FROM users u
        LEFT JOIN users_key uk ON uk.chat_id = u.chat_id
        WHERE IFNULL(u.active_chat, 1) = 1
          AND (uk.value_key IS NULL OR uk.value_key = '' OR NOT json_valid(uk.value_key));
        """
        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query) as cursor:
                    rows = await cursor.fetchall()
                    target_users = [row[0] for row in rows]

            await send_admin_log(bot, f"üìå –ù–∞–π–¥–µ–Ω–æ {len(target_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.")
            return target_users

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (WithoutKeyNotification): {e}")
            logging.error(traceback.format_exc())
            return []

    def get_message_template(self) -> str:
        templates = [
            "üß† <b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è?</b>\n\n"
            "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ 199‚ÇΩ. –ê <b>–ø–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> ‚Äî –±–µ–∑ —Ä–∏—Å–∫–æ–≤!\n"
            "–£–∂–µ —Ç—ã—Å—è—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∑–∞ –º–∏–Ω—É—Ç—É. \n –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å üí¨",

            "üß∞ <b>–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π?</b>\n\n"
            "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ ‚Äî –º—ã <b>–ø–æ–º–æ–∂–µ–º –≤—Ä—É—á–Ω—É—é</b>.\n"
            "VPN —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ –∏ —Å—Ç–æ–∏—Ç –º–µ–Ω—å—à–µ —á–∞—à–∫–∏ –∫–æ—Ñ–µ ‚òï. –ü–µ—Ä–≤—ã–µ 7 –¥–Ω–µ–π ‚Äî <b>–±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>!"
            "\n –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å üí¨",

            "üß° <b>–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN?</b>\n\n"
            "–ë–æ–ª—å—à–µ 2000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∑–∞ 199‚ÇΩ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.\n"
            "<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> ‚Äî –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —Å–¥–µ–ª–∞–µ–º —Å–∫–∏–¥–∫—É üî•",

            "üéØ <b>–ù–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN?</b>\n\n"
            "–ú—ã —Ä—è–¥–æ–º ‚Äî <b>–ø–æ–º–æ–∂–µ–º –≤—Å—ë –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é</b>. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.\n"
            "<b>7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b> –∏ –≤—Å–µ–≥–æ 199‚ÇΩ –≤ –º–µ—Å—è—Ü ‚Äî –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ üî•"
        ]

        return random.choice(templates)

    def get_keyboard(self) -> InlineKeyboardMarkup:

        buttons = [
            [InlineKeyboardButton(text="üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN",  callback_data="connect_vpn")],
            [InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",url="https://t.me/pingi_help")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    async def after_send_success(self, user_id: int):
        """ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø
        –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É notifications.
        """
        today = datetime.now().strftime("%m_%d")
        notification_type = f"without_key_notification_{today}"

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                query = "SELECT notification_data FROM notifications WHERE chat_id = ?"
                async with db.execute(query, (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    notification_data = json.loads(row[0]) if row and row[0] else {}

                notification_data[notification_type] = {
                    "sent_at": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
                    "status": "sent",
                    "message_type": "without_key"
                }

                update_query = "UPDATE notifications SET notification_data = ? WHERE chat_id = ?"
                await db.execute(update_query, (json.dumps(notification_data), user_id))
                await db.commit()
            #–õ–∏—à–Ω–∏–π –ª–æ–≥
            #logging.info(f"‚úÖ WithoutKeyNotification –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ after_send_success –¥–ª—è {user_id}: {e}")
