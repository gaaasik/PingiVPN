import asyncio
import logging
import os
from abc import ABC, abstractmethod
from typing import List, Optional

import aiosqlite

from bot.handlers.admin import ADMIN_CHAT_IDS, send_admin_log


async def handle_send_error(user_id: int, error: Exception):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    –ï—Å–ª–∏ –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ active_chat = FALSE.
    """
    error_text = str(error).lower()
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_text}")

    try:
        async with aiosqlite.connect(os.getenv("database_path_local")) as db:
            await db.execute(
                "UPDATE users SET active_chat = 0 WHERE chat_id = ?",
                (user_id,)
            )
            await db.commit()
        logging.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. active_chat = FALSE")
    except Exception as db_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ active_chat –¥–ª—è {user_id}: {db_error}")


class NotificationBase(ABC):
    def __init__(self, batch_size: int = 50):
        self.batch_size = batch_size
        self.target_users = []
        self.success_count = 0  # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        self.error_count = 0  # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏

    @abstractmethod
    async def fetch_target_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        pass

    @abstractmethod
    def get_message_template(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        pass

    @abstractmethod
    def get_keyboard(self) -> Optional[object]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        pass

    @abstractmethod
    def after_send_success(self, user_id: int):
        """
        –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö.
        """
        pass

    def split_into_batches(self, users: List[int]) -> List[List[int]]:
        """
        –î–µ–ª–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –±–∞—Ç—á–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
        """
        for i in range(0, len(users), self.batch_size):
            yield users[i:i + self.batch_size]

    async def send_batch(self, bot, batch: List[int]):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–∞—Ç—á–∞–º–∏.
        –†–µ–∞–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        """
        message_template = self.get_message_template()
        keyboard = self.get_keyboard()

        async def send_message(user_id):
            """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ active_chat –∏–∑ –±–∞–∑—ã
                async with aiosqlite.connect(os.getenv("database_path_local")) as db:
                    query = "SELECT active_chat FROM users WHERE chat_id = ?"
                    async with db.execute(query, (user_id,)) as cursor:
                        row = await cursor.fetchone()

                    if not row or row[0] != 1:
                        return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

                await bot.send_message(
                    chat_id=user_id,
                    text=message_template,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                self.success_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
                  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                await self.after_send_success(user_id)

            # #–î–ª—è —Ç–µ—Å—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            #     if user_id in ADMIN_CHAT_IDS:
            #         await bot.send_message(
            #             chat_id=user_id,
            #             text=message_template,
            #             reply_markup=keyboard,
            #             parse_mode="HTML"
            #         )
            #     else:
            #         logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            #
            #     self.success_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            #       # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            #     await self.after_send_success(user_id)

            except Exception as e:
                self.error_count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                await handle_send_error(user_id, e)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –±–∞—Ç—á–µ
        await asyncio.gather(*[send_message(user_id) for user_id in batch])

    async def run(self, bot):
        """
        –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        self.success_count = 0
        self.error_count = 0
        self.target_users = await self.fetch_target_users()

        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –±–∞—Ç—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for batch in self.split_into_batches(self.target_users):
            await self.send_batch(bot, batch)

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É active_chat
        if self.target_users:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≤—ã–±–æ—Ä–∫–µ
            summary_message = (
                f"üìä *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã:*\n\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.success_count}.\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {self.error_count}."
            )
            try:
                await send_admin_log(bot, summary_message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        else:
            print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
