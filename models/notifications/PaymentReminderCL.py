import asyncio
import json
import logging
import os
import traceback
from datetime import datetime, timedelta
from typing import List

import aiosqlite
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from communication_with_servers.handler_unknown_server_queue import process_unknown_server_queue
from models.UserCl import UserCl
from models.notifications.NotificationBaseCL import NotificationBase
from models.notifications.utils.dates import is_trial_ended
from bot.handlers.admin import send_admin_log, ADMIN_CHAT_IDS  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
from bot_instance import bot  # –ò–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

SEREVERS_IP = [
    "185.104.112.64",    # Server_1000
    "194.135.38.128",    # Server_2000
    "90.156.228.68",     # Server_3000
    "194.87.220.216",    # Server_4000
    "87.249.50.108",     # Server_5000
    "217.151.231.215",   # Server_6000
    "194.35.119.227",    # Server_7000
    "92.51.46.66",       # Server_8000
    "194.35.116.119",    # Server_9000
    "88.218.169.126",    # Server_10000
    "147.45.137.180",    # Server_11000
    "88.218.169.80",     # Server_12000
    "194.87.49.144",     # Server_13000
    "89.23.119.110",     # Server_14000
    "85.92.108.52",      # Server_15000
    "194.87.250.200",    # Server_16000
    "147.45.225.175",    # Server_17000
    "185.201.28.16",     # Server_18000
    "147.45.142.205",    # Server_19000
    "147.45.232.240",    # Server_10
    "217.25.91.109",     # Server_Bot_100
    "147.45.234.70",     # Server_21000
    "194.58.57.88",      # Server_22000
    "194.87.134.170",    # Server_23000
    "141.98.235.50",     # Server_24000
    "194.164.216.197",   # Server_25000
    "80.209.243.248",    # USA_27000
    "195.26.231.178",    # Germany_28000
    "66.248.207.185",    # NL_29000
    "195.26.230.208",    # FIN_31000
    "176.222.53.29",     # NL_32000
    "5.39.220.237",      # NL_33000
]




class PaymentReminder(NotificationBase):

    async def fetch_target_users(self) -> List[int]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.
        """
        query = """
        SELECT chat_id
        FROM users_key
        WHERE value_key IS NOT NULL
        AND value_key != ''
        AND json_valid(value_key) = 1
        AND json_extract(value_key, '$[0].enable') = 1
        AND json_extract(value_key, '$[0].date_key_off') IS NOT NULL
        AND json_extract(value_key, '$[0].date_key_off') != ''
        AND datetime(
            substr(json_extract(value_key, '$[0].date_key_off'), 7, 4) || '-' ||
            substr(json_extract(value_key, '$[0].date_key_off'), 4, 2) || '-' ||
            substr(json_extract(value_key, '$[0].date_key_off'), 1, 2) || ' ' ||
            substr(json_extract(value_key, '$[0].date_key_off'), 12, 8)
        ) < datetime('now');
        """

        blocked_users = []
        try:
            logging.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º...")
            logging.info(f"–ó–∞–ø—Ä–æ—Å:\n{query}")

            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query) as cursor:
                    rows = await cursor.fetchall()

            logging.info(f"‚úÖ SQL-–∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")

            # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã—Ö 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for row in rows[:5]:
                logging.info(f"üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: chat_id={row[0]}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            blocked_users = [row[0] for row in rows]

            for user in blocked_users:
                us = await UserCl.load_user(user)
                await us.active_server.enable.set(False)

            ###### –¢–æ–ª—è –¥–æ–±–∞–≤–∏–ª #########################################################################################################
            await process_unknown_server_queue()
            #########################################################################################################################

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if blocked_users:
                await send_admin_log(bot, f"üîî {len(blocked_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ.")
            else:
                await send_admin_log(bot, "üîî –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç—É–ø–∞.")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            logging.error(traceback.format_exc())

        return blocked_users

    def get_message_template(self) -> str:
        """
        –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –¥–æ—Å—Ç—É–ø–∞.
        """
        return (
            "‚ùå <b>–í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>.\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
            "üí≥ <b>–û–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø</b> –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        )

    def get_keyboard(self) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ.
        """
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy_vpn")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        )
        return keyboard

    async def after_send_success(self, user_id: int):
        """
        –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
        1. –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫.
        2. –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        today = datetime.now().strftime("%m_%d")  # –§–æ—Ä–º–∞—Ç –º–º_–¥–¥
        notification_type = f"notification_{today}"

        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await UserCl.load_user(user_id)

            if not user:
                logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
                return

            # # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫
            # for server in user.servers:
            #     date_key_off = await server.date_key_off.get()
            #     if datetime.strptime(date_key_off, "%d.%m.%Y %H:%M:%S") < datetime.now():
            #         await server.enable.set(False)  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø

            # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤
                query = "SELECT notification_data FROM notifications WHERE chat_id = ?"
                async with db.execute(query, (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    notification_data = json.loads(row[0]) if row and row[0] else {}

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤
                notification_data[notification_type] = {
                    "sent_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "status": "sent",
                    "message_type": "payment_reminder"
                }

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_query = "UPDATE notifications SET notification_data = ? WHERE chat_id = ?"
                await db.execute(update_query, (json.dumps(notification_data), user_id))
                await db.commit()

            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ after_send_success: {e}")
