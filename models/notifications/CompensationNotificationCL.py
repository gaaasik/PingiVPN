import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import List
import logging

import aiosqlite
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from models.UserCl import UserCl
from .NotificationBaseCL import NotificationBase
load_dotenv()
class CompensationNotification(NotificationBase):
    def __init__(self, batch_size: int = 50):
        super().__init__(batch_size)

    async def fetch_target_users(self) -> List[int]:
        """
        –í—ã–±–æ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.
        """
        all_users = await UserCl.get_all_users()
        target_users = []

        async def  check_and_update_user(chat_id: int):
            try:
                user = await UserCl.load_user(chat_id)
                if user and user.servers:
                    server = user.servers[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–∏–ø–æ–º "compensation"
                    async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                        query = "SELECT notification_data FROM notifications WHERE chat_id = ?"
                        async with db.execute(query, (chat_id,)) as cursor:
                            row = await cursor.fetchone()
                            if row and row[0]:
                                notification_data = json.loads(row[0])
                                for key, notification in notification_data.items():
                                    if notification.get("message_type") == "compensation" and notification.get(
                                            "status") == "sent":
                                        logging.info(
                                            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 'compensation' —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                                        return None

                    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    date_payment_key = await server.date_payment_key.get()
                    has_paid_key = await server.has_paid_key.get()

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ date_payment_key –Ω–µ —è–≤–ª—è–µ—Ç—Å—è None –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
                    if not date_payment_key or date_payment_key in ["null", "NULL"]:
                        logging.error(
                            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ date_payment_key –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {date_payment_key}")
                        return None

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ has_paid_key –≤–∞–ª–∏–¥–µ–Ω
                    if has_paid_key is None or int(has_paid_key) <= 0:
                        #logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ has_paid_key –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {has_paid_key}")
                        return None

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
                    try:
                        date_payment_key_dt = datetime.strptime(date_payment_key, "%d.%m.%Y %H:%M:%S")
                    except ValueError as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
                        return None

                    if date_payment_key_dt <= datetime(2024, 12, 20) and has_paid_key > 0:
                        await self.update_user_date_key_off(chat_id)
                        return chat_id
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
            return None

        results = await asyncio.gather(*(check_and_update_user(chat_id) for chat_id in all_users))
        target_users = [user for user in results if user is not None]
        return target_users

    async def update_user_date_key_off(self, chat_id: int):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ +10 –¥–Ω–µ–π.
        """
        try:
            user = await UserCl.load_user(chat_id)
            if user and user.servers:
                server = user.servers[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                current_date_key_off = await server.date_key_off.get()
                new_date_key_off = datetime.strptime(current_date_key_off, "%d.%m.%Y %H:%M:%S") + timedelta(days=10)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É
                #await server.date_key_off.set(new_date_key_off.strftime("%d.%m.%Y %H:%M:%S"))

                logging.info(f"–î–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è {current_date_key_off} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {new_date_key_off}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")

    def get_message_template(self) -> str:
        """
        –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.
        """
        return (
            "‚≠ê <b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</b>\n\n"
            "üí° –í —Å–≤—è–∑–∏ —Å –∞—Ç–∞–∫–∞–º–∏ –Ω–∞ –Ω–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã —É –≤–∞—Å –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. "
            "–ú—ã –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–º <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 10 –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞</b> –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏. üéâ\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!\n"
            "üíå –•–æ—Ä–æ—à–µ–≥–æ –≤–∞–º –¥–Ω—è!"
        )

    def get_keyboard(self) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        """
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton(text="üôè –°–ø–∞—Å–∏–±–æ!", callback_data="thank_you")]
        ])
        return keyboard

    async def after_send_success(self, user_id: int):
        """
        –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
        –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        """
        today = datetime.now().strftime("%m_%d")  # –§–æ—Ä–º–∞—Ç –º–º_–¥–¥
        notification_type = f"compensation_notification_{today}"

        try:
            user = await UserCl.load_user(user_id)

            if not user:
                logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
                return

            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                query = "SELECT notification_data FROM notifications WHERE chat_id = ?"
                async with db.execute(query, (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    notification_data = json.loads(row[0]) if row and row[0] else {}

                notification_data[notification_type] = {
                    "sent_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    "status": "sent",
                    "message_type": "compensation"
                }

                update_query = "UPDATE notifications SET notification_data = ? WHERE chat_id = ?"
                await db.execute(update_query, (json.dumps(notification_data), user_id))
                await db.commit()

            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ after_send_success: {e}")
