import os
import json
from datetime import datetime
from pathlib import Path


import redis.asyncio as redis
import paramiko
import logging
from typing import TYPE_CHECKING

from dotenv import load_dotenv

from models.country_server_data import get_country_server_data

if TYPE_CHECKING:
    from models.UserCl import UserCl  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Ç–∏–ø–æ–≤

load_dotenv()








#from fastapi import requests
class Field:
    def __init__(self, name, value, server: 'ServerCl'):
        self._name = name  # –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        self._value = value  # –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
        self._server: ServerCl = server  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç Server_cl


    # –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    async def get(self):
        return self._value

    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –∑–∞—â–∏—â–µ–Ω–æ (is_protected=True)
    async def _set(self, new_value):
        """–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è."""
        self._value = new_value
        setattr(self._server, f"_{self._name}", new_value)
        await self._server.update_in_db()  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç Server_cl

    # –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω–æ
    async def set(self, new_value):
        if self._name == "enable":
            await self.set_enable(new_value)
            return
        await self._set(new_value)

        # if self._is_protected:
        #     raise AttributeError(f"Field '{self._name}' is protected and cannot be changed directly.")
        # await self._set(new_value)

    async def get_date(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
        if self._name not in ["date_key_off", "date_creation_key", "date_payment_key"]:
            raise AttributeError(f"–ú–µ—Ç–æ–¥ get_date –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—è '{self._name}'")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
        if isinstance(self._value, str):
            date_obj = datetime.strptime(self._value, "%d.%m.%Y %H:%M:%S")
        elif isinstance(self._value, datetime):
            date_obj = self._value
        else:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")

        return date_obj.strftime("%d.%m.%Y")

    async def get_country(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—è 'country_server'
        if self._name != "country_server":
            raise AttributeError("–ú–µ—Ç–æ–¥ get_country –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—è 'country_server'.")

        #–ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, —Å–º–æ—Ç—Ä–∏ –µ–µ –≤ —Å–ø–∏—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ country_server
        if self._value == "Unknown":
            country = await self._server.user.get_country_by_server_ip(await self._server.server_ip.get())
            await self._server.country_server.set(country)


        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–∞–Ω
        COUNTRY_TRANSLATIONS = {
            "USA": "üá∫üá∏ –°–®–ê",
            "Germany": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è",
            "France": "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è",
            "Netherlands": "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã",
            "Russia": "üá∑üá∫ –†–æ—Å—Å–∏—è",
            "China": "üá®üá≥ –ö–∏—Ç–∞–π",
            "Japan": "üáØüáµ –Ø–ø–æ–Ω–∏—è",
            "Poland": "üáµüá± –ü–æ–ª—å—à–∞",
            "Unknown": "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã"
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É –∏–∑ –ø–æ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
        country = self._value
        return COUNTRY_TRANSLATIONS.get(country, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞")





    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
    async def set_enable(self, enable_value: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ enable –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ Redis."""
        country_server_data = await get_country_server_data()

        if self._name != "enable":
            raise AttributeError("–ú–µ—Ç–æ–¥ set_enable –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—è 'enable'.")

        if country_server_data is None:
            raise RuntimeError("–î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–∑–æ–≤ load_server_data().")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ–±—ä–µ–∫—Ç–µ –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await self._set(enable_value)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
        chat_id = self._server.user.chat_id
        name_protocol = await self._server.name_protocol.get()
        uuid_value = await self._server.uuid_id.get()
        server_ip = await self._server.server_ip.get()
        user_ip = await self._server.user_ip.get()

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        server_name = self.__get_server_name_by_ip(country_server_data, server_ip)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        task_data = {
            "name_protocol": name_protocol,
            "chat_id": chat_id,
            "server_ip": server_ip,
            "user_ip": user_ip,
            "uuid_value": uuid_value,
            "enable": enable_value,
        }
        queue_name = f"queue_task_{server_name}"
        logging.info(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥—å: {queue_name}")
        redis_client=None
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º redis.asyncio –≤–º–µ—Å—Ç–æ aioredis     –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏
        try:
            redis_client = redis.Redis(
                host=os.getenv('ip_redis_server'),
                port=int(os.getenv('port_redis')),
                password=os.getenv('password_redis'),
                decode_responses=True
            )
            await redis_client.rpush(queue_name, json.dumps(task_data))
            logging.info(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å {queue_name}: {task_data}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å {queue_name}: {e}")
        finally:
            if redis_client:
                await redis_client.close()

    def __get_server_name_by_ip(self, server_data, ip_address: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –µ–≥–æ IP."""
        for server in server_data.get("servers", []):
            if server.get("address") == ip_address:
                return server.get("name", "Unknown_Server")
        return "Unknown_Server"




class ServerCl:
    def __init__(self, server_data: dict, user: "UserCl"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –≤ JSON
        self.country_server = Field('country_server', server_data.get("country_server", ""), self)
        self.date_creation_key = Field('date_creation_key', server_data.get("date_creation_key", ""), self)
        self.date_key_off = Field('date_key_off', server_data.get("date_key_off", ""), self)
        self.date_latest_handshake = Field('date_latest_handshake', server_data.get("date_latest_handshake", ""), self)
        self.date_payment_key = Field('date_payment_key', server_data.get("date_payment_key", ""), self)
        self.email_key = Field('email_key', server_data.get("email_key", ""), self)
        self.enable = Field('enable', server_data.get("enable", None), self)
        self.has_paid_key = Field('has_paid_key', server_data.get("has_paid_key", 1), self)
        self.name_key = Field('name_key', server_data.get("name_key", ""), self)
        self.name_protocol = Field('name_protocol', server_data.get("name_protocol", ""), self)
        self.name_server = Field('name_server', server_data.get("name_server", ""), self)
        self.server_ip = Field('server_ip', server_data.get("server_ip", ""), self)
        self.status_key = Field('status_key', server_data.get("status_key", 'new_user'), self)
        self.traffic_down = Field('traffic_down', server_data.get("traffic_down", 0), self)
        self.traffic_up = Field('traffic_up', server_data.get("traffic_up", 0), self)
        self.url_vless = Field('url_vless', server_data.get("url_vless", ""), self)
        self.user_ip = Field('user_ip', server_data.get("user_ip", ""), self)
        self.uuid_id = Field('uuid_id', server_data.get("uuid_id", ""), self)
        self.user = user  # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç User –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ


    async def update_in_db(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç User."""
        await self.user._update_servers_in_db()

    async def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ JSON."""
        return {

            "country_server": await self.country_server.get(),
            "date_creation_key": await self.date_creation_key.get(),
            "date_latest_handshake": await self.date_latest_handshake.get(),
            "date_key_off": await self.date_key_off.get(),
            "date_payment_key": await self.date_payment_key.get(),
            "email_key": await self.email_key.get(),
            "enable": await self.enable.get(),
            "has_paid_key": await self.has_paid_key.get(),
            "name_key": await self.name_key.get(),
            "name_protocol": await self.name_protocol.get(),
            "name_server": await self.name_server.get(),
            "server_ip": await self.server_ip.get(),
            "status_key": await self.status_key.get(),
            "traffic_down": await self.traffic_down.get(),
            "traffic_up": await self.traffic_up.get(),
            "url_vless": await self.url_vless.get(),
            "user_ip": await self.user_ip.get(),
            "uuid_id": await self.uuid_id.get()
        }




    async def delete(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ servers –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self in self.user.servers:
            # –£–¥–∞–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ servers
            self.user.servers.remove(self)




            # –û–±–Ω–æ–≤–ª—è–µ–º value_key –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤) –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            await self.user._update_servers_in_db()
            # –û–±–Ω–æ–≤–ª—è–µ–º count_key
            await self.user.count_key._update_count_key()
            print(f"–°–µ—Ä–≤–µ—Ä { await self.name_server.get()} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return True
        else:
            print("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return False

    # async def _update_json_on_server(self, new_enable_value: bool):
    #     """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª JSONschec–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ SSH –∏ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–ª–µ enable."""
    #     ssh_host = "195.133.14.202"
    #     ssh_user = "root"
    #     ssh_password = "jzH^zvfW1J4qRX"
    #     json_file_path = "/root/.wg-easy/wg0.json"
    #
    #     try:
    #         # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    #         print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    #         client = paramiko.SSHClient()
    #         client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    #         client.connect(ssh_host, username=ssh_user, password=ssh_password)
    #
    #         print("–ö —Å–µ—Ä–≤–µ—Ä—É –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ")  # –í—ã–≤–æ–¥–∏–º —Ñ—Ä–∞–∑—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    #
    #         # –û—Ç–∫—Ä—ã–≤–∞–µ–º SFTP-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    #         sftp = client.open_sftp()
    #
    #         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ JSON –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    #         print(f"–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å JSON-—Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏ {json_file_path}")
    #         try:
    #             with sftp.open(json_file_path, 'r') as json_file:
    #                 wg_config = json.load(json_file)
    #             print(f"–§–∞–π–ª {json_file_path} —É—Å–ø–µ—à–Ω–æ —Å—á–∏—Ç–∞–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    #         except FileNotFoundError:
    #             print(f"–§–∞–π–ª {json_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    #             return
    #         except Exception as e:
    #             print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    #             return
    #
    #         # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ user_ip –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ enable –∑–Ω–∞—á–µ–Ω–∏–µ
    #         client_key = next(
    #             (key for key, client in wg_config['clients'].items() if client['address'] == self.user_ip.get()), None)
    #         if client_key:
    #             print(f"–ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç —Å IP: {self.user_ip.get()}, –æ–±–Ω–æ–≤–ª—è–µ–º enabled –Ω–∞ {new_enable_value}")
    #             wg_config['clients'][client_key]['enabled'] = new_enable_value
    #             await self.enable._set(new_enable_value)  # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –≤ –æ–±—ä–µ–∫—Ç–µ Server_cl
    #         else:
    #             print(f"–ö–ª–∏–µ–Ω—Ç —Å IP {self.user_ip.get()} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON-—Ñ–∞–π–ª–µ.")
    #             return
    #
    #         # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    #         print(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª {json_file_path}")
    #         with sftp.open(json_file_path, 'w') as json_file:
    #             json.dump(wg_config, json_file, indent=4)
    #             print(f"–§–∞–π–ª {json_file_path} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    #
    #         # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WireGuard Easy —á–µ—Ä–µ–∑ Docker
    #         print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WireGuard Easy...")
    #         stdin, stdout, stderr = client.exec_command('docker restart wg-easy')
    #         stdout.channel.recv_exit_status()
    #         print("WireGuard –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
    #
    #         # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    #         sftp.close()
    #         client.close()
    #
    #     except paramiko.SSHException as ssh_err:
    #         print(f"–û—à–∏–±–∫–∞ SSH: {ssh_err}")
    #     except Exception as e:
    #         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ JSON –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
    #
    # async def change_enable(self, new_enable_value: bool):
    #     """–ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è enable –ø–æ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤ –æ–±—ä–µ–∫—Ç–µ"""
    #     await self._update_json_on_server(new_enable_value)