import json

import aiosqlite
import os
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict

from bot.handlers.admin import send_admin_log
from bot_instance import bot


class ReferralCl:
    # –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    STATUS_INVITED = "invited"       # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É
    STATUS_ACTIVATED = "activated"   # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –∏ –Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    STATUS_PAID = "paid"             # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É

    # –í–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –±–æ–Ω—É—Å–æ–≤
    BONUS_NONE = "no_bonus"         # –ë–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω
    BONUS_ACTIVATION = "bonus_2_days_added"  # –ù–∞—á–∏—Å–ª–µ–Ω—ã 2 –¥–Ω—è –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é close()
    BONUS_PAYMENT = "bonus_14_days_added"    # –ù–∞—á–∏—Å–ª–µ–Ω—ã 14 –¥–Ω–µ–π –∑–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏


    def __init__(self, referral_old_chat_id: int, referral_new_chat_id: int):
        self.referral_old_chat_id = referral_old_chat_id  # ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.referral_new_chat_id = referral_new_chat_id  # ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.date_referred: Optional[str] = None          # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        self.referral_status: str = "invited"             # –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (invited, active, paid)
        self.bonus_status: str = "no_bonus"               # –°—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–∞ (no_bonus, bonus_added)
        self.date_bonus_awarded: Optional[str] = None     # –î–∞—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞

    @classmethod
    async def create_referral(cls, referral_old_chat_id: int, referral_new_chat_id: int) -> "ReferralCl":
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        referral = cls(referral_old_chat_id, referral_new_chat_id)
        referral.date_referred = datetime.now().strftime("%d.%m.%Y %H:%M:%S")

        query = """
        INSERT INTO referrals (
            referral_old_chat_id,
            referral_new_chat_id,
            date_referred,
            referral_status,
            bonus_status
        ) VALUES (?, ?, ?, ?, ?)
        """
        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                await db.execute(query, (
                    referral_old_chat_id,
                    referral_new_chat_id,
                    referral.date_referred,
                    referral.referral_status,
                    referral.bonus_status
                ))
                await db.commit()
                logging.info(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞: {referral_old_chat_id} -> {referral_new_chat_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")
            raise

        return referral

    @classmethod
    async def handle_referral(cls, chat_id, referral_old_chat_id, bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É.
        """

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
        referral = await cls.create_referral(referral_old_chat_id, chat_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        new_user = await bot.get_chat(chat_id)
        new_user_name = new_user.username or new_user.full_name
        referral_message = (
            f"üéâ –°–ø–∞—Å–∏–±–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_name} (@{new_user.username or '‚Äî'}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Pingi VPN –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ üéÅ \n"
            f"üéÅ –í–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ !"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if referral_old_chat_id !=1021956655:
                await bot.send_message(referral_old_chat_id, referral_message)
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referral_old_chat_id}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referral_old_chat_id}: {e}")

    @classmethod
    async def get_user_referrals(cls, referral_old_chat_id: int) -> List["ReferralCl"]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        query = """
        SELECT referral_new_chat_id, date_referred, referral_status, bonus_status
        FROM referrals WHERE referral_old_chat_id = ?
        """
        referrals = []

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query, (referral_old_chat_id,)) as cursor:
                    rows = await cursor.fetchall()
                    for row in rows:
                        referral = cls(referral_old_chat_id, row[0])
                        referral.date_referred = row[1]
                        referral.referral_status = row[2]
                        referral.bonus_status = row[3]
                        referrals.append(referral)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {referral_old_chat_id}: {e}")

        return referrals

    @classmethod
    async def add_referral_bonus(cls, referral_new_chat_id: int):
        """
        –ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
        - 2 –¥–Ω—è –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é (–ø–æ–ª—É—á–µ–Ω–∏–µ VPN-—Å—Å—ã–ª–∫–∏).
        """
        query_check = """
        SELECT referral_old_chat_id, referral_status, bonus_status FROM referrals WHERE referral_new_chat_id = ?
        """
        query_update_activation = """
        UPDATE referrals SET referral_status = ?, bonus_status = ? WHERE referral_new_chat_id = ?
        """

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query_check, (referral_new_chat_id,)) as cursor:
                    row = await cursor.fetchone()

                    if not row:
                        return  # –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

                    referral_old_chat_id, referral_status, bonus_status = row

                    if referral_status == cls.STATUS_INVITED:
                        # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç VPN ‚Üí –¥–∞–µ–º 2 –¥–Ω—è –±–æ–Ω—É—Å–∞
                        if bonus_status == cls.BONUS_NONE:
                            await cls._add_days_to_inviter(referral_old_chat_id, days=2)

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                            await db.execute(query_update_activation,
                                             (cls.STATUS_ACTIVATED, cls.BONUS_ACTIVATION, referral_new_chat_id))
                            await db.commit()

                            logging.info(f"–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referral_old_chat_id}.")
                            await send_admin_log(bot,f"üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referral_old_chat_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ !")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: {e}")

    @classmethod
    async def add_referral_bonus_after_pay(cls, referral_new_chat_id: int, bot):
        """
        –ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å –∑–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ (10 –¥–Ω–µ–π) –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É.
        """
        query_check = """
        SELECT referral_old_chat_id, referral_status, bonus_status FROM referrals WHERE referral_new_chat_id = ?
        """
        query_update_payment = """
        UPDATE referrals SET referral_status = ?, bonus_status = ? WHERE referral_new_chat_id = ?
        """

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query_check, (referral_new_chat_id,)) as cursor:
                    row = await cursor.fetchone()

                    if not row:
                        return  # –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

                    referral_old_chat_id, referral_status, bonus_status = row

                    if referral_status == cls.STATUS_ACTIVATED:
                        # –ï—Å–ª–∏ –±–æ–Ω—É—Å –∑–∞ –æ–ø–ª–∞—Ç—É –µ—â–µ –Ω–µ –±—ã–ª –≤—ã–¥–∞–Ω
                        if bonus_status != cls.BONUS_PAYMENT:
                            await cls._add_days_to_inviter(referral_old_chat_id, days=10)

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                            await db.execute(query_update_payment,
                                             (cls.STATUS_PAID, cls.BONUS_PAYMENT, referral_new_chat_id))
                            await db.commit()

                            logging.info(f"–ë–æ–Ω—É—Å –∑–∞ –æ–ø–ª–∞—Ç—É –Ω–∞—á–∏—Å–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referral_old_chat_id}.")

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                            try:
                                message = (
                                    f"üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª (ID: {referral_new_chat_id}) –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É!\n"
                                    f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üòä"
                                )
                                await bot.send_message(referral_old_chat_id, message)
                                await send_admin_log(bot,f"üéÅüéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referral_old_chat_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã !")
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referral_old_chat_id}: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ –∑–∞ –æ–ø–ª–∞—Ç—É: {e}")

    @classmethod
    async def _add_days_to_inviter(cls, inviter_chat_id: int, days: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∫ —Å—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        query_get_key = "SELECT value_key FROM users_key WHERE chat_id = ?"
        query_update_key = "UPDATE users_key SET value_key = ? WHERE chat_id = ?"

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query_get_key, (inviter_chat_id,)) as cursor:
                    row = await cursor.fetchone()
                    if not row:
                        logging.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inviter_chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        return

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º JSON
                    user_keys = json.loads(row[0])

                    for key in user_keys:
                        if "date_key_off" in key:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            current_date = datetime.strptime(key["date_key_off"], "%d.%m.%Y %H:%M:%S")
                            new_date = current_date + timedelta(days=days)

                            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON
                            key["date_key_off"] = new_date.strftime("%d.%m.%Y %H:%M:%S")

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
                            updated_json = json.dumps(user_keys)

                            await db.execute(query_update_key, (updated_json, inviter_chat_id))
                            await db.commit()
                            logging.info(f"‚úÖ {days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {inviter_chat_id}.")
                            return

                    logging.warning(f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {inviter_chat_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π: {e}")

    #
    # async def check_activation(self) -> bool:
    #     """
    #     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª (–µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä).
    #     """
    #     if self.bonus_status == "bonus_2_days_added":
    #         logging.info(f"–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è {self.referral_new_chat_id}.")
    #         return False
    #
    #     from models.UserCl import UserCl
    #     user = await UserCl.load_user(self.referral_new_chat_id)
    #     if not user or not user.servers:
    #         return False
    #
    #     self.referral_status = "active"
    #     await self.update_referral_status()
    #     await self.add_bonus_days(bonus_days=2, bonus_type="bonus_2_days_added")
    #     return True
    #
    # async def check_payment(self) -> bool:
    #     """
    #     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∫—É.
    #     """
    #     if self.bonus_status == "bonus_14_days_added":
    #         logging.info(f"–ë–æ–Ω—É—Å –∑–∞ –æ–ø–ª–∞—Ç—É —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {self.referral_new_chat_id}.")
    #         return False
    #
    #     from models.UserCl import UserCl
    #     user = await UserCl.load_user(self.referral_new_chat_id)
    #     if not user or not user.servers:
    #         return False
    #
    #     for server in user.servers:
    #         has_paid_key = await server.has_paid_key.get()
    #         if has_paid_key > 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª—é—á
    #             self.referral_status = "paid"
    #             await self.update_referral_status()
    #             await self.add_bonus_days(bonus_days=14, bonus_type="bonus_14_days_added")
    #             return True
    #
    #     return False
    #
    # async def add_bonus_days(self, bonus_days: int, bonus_type: str):
    #     """
    #     –î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞.
    #     """
    #     from models.UserCl import UserCl
    #     inviter = await UserCl.load_user(self.referral_old_chat_id)
    #     if not inviter or not inviter.servers:
    #         return
    #
    #     for server in inviter.servers:
    #         current_date_key_off = await server.date_key_off.get()
    #         current_date_key_off = datetime.strptime(current_date_key_off, "%d.%m.%Y %H:%M:%S")
    #         new_date_key_off = current_date_key_off + timedelta(days=bonus_days)
    #         await server.date_key_off.set(new_date_key_off.strftime("%d.%m.%Y %H:%M:%S"))
    #
    #     self.bonus_status = bonus_type
    #     self.date_bonus_awarded = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    #     await self.update_referral_status()
    #
    # async def update_referral_status(self):
    #     """
    #     –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    #     """
    #     query = "UPDATE referrals SET referral_status = ?, bonus_status = ? WHERE referral_old_chat_id = ? AND referral_new_chat_id = ?"
    #     try:
    #         async with aiosqlite.connect(os.getenv('database_path_local')) as db:
    #             await db.execute(query, (
    #                 self.referral_status, self.bonus_status,
    #                 self.referral_old_chat_id, self.referral_new_chat_id
    #             ))
    #             await db.commit()
    #     except Exception as e:
    #         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
    #         raise
    #
    #
    #
    # async def to_dict(self) -> Dict:
    #     """
    #     –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.
    #     """
    #     return {
    #         "referral_old_chat_id": self.referral_old_chat_id,
    #         "referral_new_chat_id": self.referral_new_chat_id,
    #         "date_referred": self.date_referred,
    #         "referral_status": self.referral_status,
    #         "bonus_status": self.bonus_status,
    #         "date_bonus_awarded": self.date_bonus_awarded,
    #     }
