import aiosqlite
import os
import logging
from datetime import datetime, timedelta
from typing import Optional, List, Dict

class ReferralCl:
    def __init__(self, referral_old_chat_id: int, referral_new_chat_id: int):
        self.referral_old_chat_id = referral_old_chat_id  # ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.referral_new_chat_id = referral_new_chat_id  # ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.date_referred: Optional[str] = None          # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        self.referral_status: str = "invited"             # –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (invited, active, paid)
        self.bonus_status: str = "no_bonus"               # –°—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–∞ (no_bonus, bonus_added)
        self.date_bonus_awarded: Optional[str] = None     # –î–∞—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞

    @classmethod
    async def create_referral(cls, referral_old_chat_id: int, referral_new_chat_id: int) -> "ReferralCl":
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        referral = cls(referral_old_chat_id, referral_new_chat_id)
        referral.date_referred = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        query = """
        INSERT INTO referrals (
            referral_old_chat_id,
            referral_new_chat_id,
            date_referred,
            referral_status,
            bonus_status
        ) VALUES (?, ?, ?, ?, ?)
        """
        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                await db.execute(query, (
                    referral_old_chat_id,
                    referral_new_chat_id,
                    referral.date_referred,
                    referral.referral_status,
                    referral.bonus_status
                ))
                await db.commit()
                logging.info(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞: {referral_old_chat_id} -> {referral_new_chat_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")
            raise

        return referral

    @classmethod
    async def handle_referral(cls, chat_id, referral_old_chat_id, bot):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞. –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        from models.UserCl import UserCl
        if await UserCl.user_exists(chat_id):
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
        referral = await cls.create_referral(referral_old_chat_id, chat_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        new_user = await bot.get_chat(chat_id)
        new_user_name = new_user.username or new_user.full_name
        referral_message = (
            f"üéâ –£—Ä–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_name} (@{new_user.username or '‚Äî'}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Pingi VPN –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ."
            "–ü—Ä–∏ –Ω–∞—á–∞–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–º –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏! üéÅ"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(referral_old_chat_id, referral_message)
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referral_old_chat_id}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referral_old_chat_id}: {e}")

    @classmethod
    async def load_referral(cls, referral_old_chat_id: int, referral_new_chat_id: int) -> Optional["ReferralCl"]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        query = """
        SELECT referral_old_chat_id, referral_new_chat_id, date_referred, referral_status, bonus_status, date_bonus_awarded
        FROM referrals WHERE referral_old_chat_id = ? AND referral_new_chat_id = ?
        """
        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query, (referral_old_chat_id, referral_new_chat_id)) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        self = cls(referral_old_chat_id=row[0], referral_new_chat_id=row[1])
                        self.date_referred = row[2]
                        self.referral_status = row[3]
                        self.bonus_status = row[4]
                        self.date_bonus_awarded = row[5]
                        return self
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
            raise

        return None

    @classmethod
    async def get_all_referrals(cls) -> List["ReferralCl"]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
        """
        query = "SELECT referral_old_chat_id, referral_new_chat_id FROM referrals"
        referrals = []

        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                async with db.execute(query) as cursor:
                    rows = await cursor.fetchall()
                    referrals = [
                        await cls.load_referral(row[0], row[1])
                        for row in rows
                    ]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
            raise

        return referrals

    async def check_activation(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª (–µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª —Å–µ—Ä–≤–µ—Ä).
        """
        if self.bonus_status in ["bonus_3_days_added", "bonus_14_days_added"]:
            logging.info(f"–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {self.referral_new_chat_id}.")
            return False

        from models.UserCl import UserCl
        user = await UserCl.load_user(self.referral_new_chat_id)
        if not user or not user.servers:
            return False

        self.referral_status = "active"
        await self.update_referral_status()
        await self.add_bonus_days(bonus_days=3, bonus_type="bonus_3_days_added")
        return True

    async def check_payment(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∫—É.
        """
        if self.bonus_status == "bonus_14_days_added":
            logging.info(f"–ë–æ–Ω—É—Å –∑–∞ –æ–ø–ª–∞—Ç—É —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {self.referral_new_chat_id}.")
            return False

        from models.UserCl import UserCl
        user = await UserCl.load_user(self.referral_new_chat_id)
        if not user or not user.servers:
            return False

        for server in user.servers:
            has_paid_key = await server.has_paid_key.get()
            if has_paid_key > 0:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª—é—á
                self.referral_status = "paid"
                await self.update_referral_status()
                await self.add_bonus_days(bonus_days=14, bonus_type="bonus_14_days_added")
                return True

        return False

    async def add_bonus_days(self, bonus_days: int, bonus_type: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞.
        """
        from models.UserCl import UserCl
        inviter = await UserCl.load_user(self.referral_old_chat_id)
        if not inviter or not inviter.servers:
            return

        for server in inviter.servers:
            current_date_key_off = await server.date_key_off.get()
            current_date_key_off = datetime.strptime(current_date_key_off, "%d.%m.%Y %H:%M:%S")
            new_date_key_off = current_date_key_off + timedelta(days=bonus_days)
            await server.date_key_off.set(new_date_key_off.strftime("%d.%m.%Y %H:%M:%S"))

        self.bonus_status = bonus_type
        self.date_bonus_awarded = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        await self.update_referral_status()

    async def update_referral_status(self):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        query = "UPDATE referrals SET referral_status = ?, bonus_status = ? WHERE referral_old_chat_id = ? AND referral_new_chat_id = ?"
        try:
            async with aiosqlite.connect(os.getenv('database_path_local')) as db:
                await db.execute(query, (
                    self.referral_status, self.bonus_status,
                    self.referral_old_chat_id, self.referral_new_chat_id
                ))
                await db.commit()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
            raise



    async def to_dict(self) -> Dict:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.
        """
        return {
            "referral_old_chat_id": self.referral_old_chat_id,
            "referral_new_chat_id": self.referral_new_chat_id,
            "date_referred": self.date_referred,
            "referral_status": self.referral_status,
            "bonus_status": self.bonus_status,
            "date_bonus_awarded": self.date_bonus_awarded,
        }
