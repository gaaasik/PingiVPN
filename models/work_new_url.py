import asyncio
import json
import logging
import traceback

from models.UserCl import UserCl


async def update_users_keys():
    try:
        json_file_path = "models/new_key.json"
        with open(json_file_path, "r", encoding="utf-8") as file:
            data = json.load(file)

        if "users" not in data or not isinstance(data["users"], list):
            print("–û—à–∏–±–∫–∞: –í JSON –Ω–µ—Ç –∫–ª—é—á–∞ 'users' –∏–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
            return

        for user_data in data["users"]:
            try:
                chat_id = user_data.get("chat_id")
                url = user_data.get("url")

                if chat_id is None or not isinstance(chat_id, int):
                    print(f"–û—à–∏–±–∫–∞: chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {user_data}")
                    continue

                if not isinstance(url, str) or not url.startswith("vless://"):
                    print(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL {url} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    continue

                user = await UserCl.load_user(chat_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user is None:
                    print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id {chat_id}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç URL –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                is_duplicate = False
                if url == await user.active_server.url_vless.get():
                    is_duplicate = True


                if is_duplicate:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

                await user.update_key_to_vless(url)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chat_id {chat_id}: {e}")
                traceback.print_exc()

    except Exception as e:
        print(f"üî• –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON: {e}")
        traceback.print_exc()




# async def update_users_keys():
#     """
#     –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel-—Ñ–∞–π–ª–∞.
#     """
#     file_path = "models/new_key.json"
#
#     try:
#         df = pd.read_excel(file_path, engine='openpyxl')
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
#         return
#
#
#     required_columns = {"chat_id", "url"}
#     if not required_columns.issubset(df.columns):
#         logging.error(f"–§–∞–π–ª Excel –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(required_columns)}")
#         return
#
#
#     for _, row in df.iterrows():
#         chat_id = row["chat_id"]
#         url = row["url"]
#
#         try:
#             user = await UserCl.load_user(chat_id)
#             if user:
#                 logging.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
#                 await user.update_key_to_vless(url)
#             else:
#                 logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
#         except Exception as e:
#             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")