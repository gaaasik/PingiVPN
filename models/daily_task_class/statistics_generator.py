import logging
import os
from datetime import datetime, timedelta
import aiofiles
from redis_configs.redis_settings import redis_client_main
from models.UserCl import UserCl
import communication_with_servers.result_processor.all_processor.result_creating_user as result_module



async def generate_statistic_text(date: datetime = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
    """
    try:
        if not date:
            date = datetime.now() - timedelta(days=1)

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        new_users = await UserCl.count_users_by_date(date) or 0
        total_users = len(await UserCl.get_all_users()) or 0
        active_users = await UserCl.count_active_chat_users() or 0
        paid_users = await UserCl.count_paid_users_by_date(date) or 0
        total_paid_users = await UserCl.count_total_paid_users(datetime(2024, 11, 24)) or 0
        remaining_configs = await get_remaining_configs() or 0
        count_vless = result_module.daily_created_users_vless
        count_wg = result_module.daily_created_users_wg
        remaining_urls = await count_remaining_vless_links() or 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date.strftime('%d.%m.%Y')}</b> üìä\n\n"
            f"üë• <b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {new_users}\n"
            f"üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:</b> {active_users}\n"
            f"üåç <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
            f"üí≥ <b>–û–ø–ª–∞—Ç–∏–ª–∏ –∑–∞ –¥–µ–Ω—å:</b> {paid_users}\n"
            f"üí≥ <b>–í—Å–µ–≥–æ –æ–ø–ª–∞—Ç —Å 24.11.2024:</b> {total_paid_users}\n"
            f"üîë <b>–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:</b> {remaining_configs}\n"
            f"üîó <b>–û—Å—Ç–∞–ª–æ—Å—å —Å—Å—ã–ª–æ–∫ Vless:</b> {remaining_urls}\n"
            f"üîÑ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ Vless:</b> {count_vless}\n"
            f"üîÑ <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ WG:</b> {count_wg}\n"
        ).strip()

        return stats_message if stats_message else f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date.strftime('%d.%m.%Y')} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {date.strftime('%d.%m.%Y')}:\n<code>{str(e)}</code>"

async def count_remaining_vless_links() -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è Vless —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ.
    """
    try:
        configs_dir = os.getenv("CONFIGS_DIR", "C:/PycharmProjects/PingiVPN/configs")
        vless_file_path = os.path.join(configs_dir, "url_vless_new")

        if not os.path.exists(vless_file_path):
            logging.error(f"–§–∞–π–ª {vless_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return 0

        async with aiofiles.open(vless_file_path, "r", encoding="utf-8") as file:
            links = [line.strip() for line in await file.readlines() if line.strip().startswith("vless://")]

        return len(links)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Vless: {e}")
        return 0

async def get_remaining_configs() -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
        """
        try:
            # –ü—Ä–∏–≤–æ–¥–∏–º –ø—É—Ç—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É –¥–ª—è –û–° (–≤ Windows –∑–∞–º–µ–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏)

            from bot.utils.file_sender import BASE_CONFIGS_DIR
            directory = os.path.normpath(BASE_CONFIGS_DIR)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            if not os.path.exists(directory):
                raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
            if not os.path.isdir(directory):
                raise NotADirectoryError(f"{directory} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")

            # –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            files_in_directory = os.listdir(directory)
            # print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {files_in_directory}")

            # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            conf_files = len([f for f in files_in_directory if f.endswith('_free.conf')])
            return conf_files  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        except FileNotFoundError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ–∞–ª–æ–≤: {e}")
            return -1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞


