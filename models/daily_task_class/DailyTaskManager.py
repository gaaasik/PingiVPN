import os
import logging
from datetime import datetime, timedelta
from models.daily_task_class.statistics_generator import generate_statistic_text  # –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

from pathlib import Path

import aiofiles

from bot.handlers.admin import send_admin_log, ADMIN_CHAT_IDS
from redis_configs.redis_settings import redis_client_main
from models.UserCl import UserCl
from models.referral_class.ReferralCL import ReferralCl
#–ù–∞–¥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å!!!!!!!!!!!



class DailyTaskManager:
    def __init__(self, bot):
        self.bot = bot

    async def generate_statistics(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å queue_results_task
    # async def count_remaining_vless_links(self) -> int:
    #     """
    #     –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è VLESS —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ.
    #     """
    #     global url_vless_new_path
    #     try:
    #         # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    #         config_dir = os.getenv("CONFIGS_DIR")
    #         if not config_dir:
    #             logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è CONFIGS_DIR –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    #             return 0
    #
    #         # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    #         url_vless_new_path = os.path.join(config_dir, "url_vless_new")
    #
    #         logging.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª: {url_vless_new_path}")
    #
    #         async with aiofiles.open(url_vless_new_path, "r") as file:
    #             urls = await file.readlines()
    #
    #         # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Å—ã–ª–∫–∏ vless://
    #         remaining_urls = [url.strip() for url in urls if url.strip().startswith("vless://")]
    #         count_remaining = len(remaining_urls)
    #
    #         logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Å—ã–ª–æ–∫: {count_remaining}")
    #
    #         return count_remaining
    #
    #     except FileNotFoundError:
    #         logging.error(f"–§–∞–π–ª {url_vless_new_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    #         return 0
    #     except Exception as e:
    #         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ VLESS: {e}")
    #         return 0
    #
    # async def generate_statistics(self):
    #     """
    #     –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    #     """
    #
    #
    #     # project_root = Path(__file__).resolve().parent.parent
    #     # url_vless_new_path = project_root / "configs" / "url_vless_new"
    #     # async with aiofiles.open(url_vless_new_path, "r") as file:
    #     #     urls = await file.readlines()
    #     remaining_urls = await self.count_remaining_vless_links()
    #
    #     yesterday = datetime.now() - timedelta(days=1)
    #     new_users = await UserCl.count_users_by_date(yesterday)
    #     total_users = len(await UserCl.get_all_users())
    #     paid_users = await UserCl.count_paid_users_by_date(yesterday)
    #     total_paid_users = await UserCl.count_total_paid_users(datetime(2024, 11, 24))
    #
    #     remaining_configs = await self.get_remaining_configs()
    #     count_regeneration_user = await redis_client.get("new_vless_users_today")
    #
    #     stats_message = (
    #         f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> üìä\n\n"
    #         f"üóì <b>–î–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ :</b> {yesterday.strftime('%Y-%m-%d')}\n"
    #         f"üë• <b>–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {new_users}\n"
    #         f"üîë <b>–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ WG:</b> {remaining_configs}\n"
    #         f"üîë <b>–û—Å—Ç–∞–ª–æ—Å—å —Å—Å—ã–ª–æ–∫ url vless:</b> {remaining_urls}\n"
    #         f"üîë <b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ url vless:</b> {count_regeneration_user}\n"
    #         f"üåç <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
    #         f"üí≥ <b>–û–ø–ª–∞—Ç–∏–ª–∏ –≤—á–µ—Ä–∞:</b> {paid_users}\n"
    #         f"üí≥ <b>–í—Å–µ–≥–æ –æ–ø–ª–∞—Ç —Å 24.11.2024:</b> {total_paid_users}"
    #     )
    #
    #     await send_admin_log(self.bot, stats_message
    #
    async def show_statistic(self, date: datetime = None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∑–∞ –≤—á–µ—Ä–∞.
        """
        try:
            stats_message = await generate_statistic_text(date)
            await send_admin_log(self.bot, stats_message)
            return stats_message

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n<code>{str(e)}</code>"

    async def update_user_statuses(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–µ–π.
        """
        users = await UserCl.get_all_users()
        for user in users:
            try:
                for server in user.servers:
                    date_key_off = await server.date_key_off.get()
                    if date_key_off:
                        expiration_date = datetime.strptime(date_key_off, "%d.%m.%Y %H:%M:%S")
                        if expiration_date < datetime.now():
                            await server.status_key.set("blocked")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.chat_id}: {e}")

    async def send_logs_to_admin(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
        """
        log_files = ["/var/log/pingi_vpn_bot_output.log", "/var/log/pingi_vpn_bot_error.log"]
        for log_file in log_files:
            if os.path.exists(log_file):
                try:
                    with open(log_file, "rb") as file:
                        await self.bot.send_document(chat_id=ADMIN_CHAT_IDS[0], document=file, caption=f"–õ–æ–≥–∏: {log_file}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {e}")

    async def execute_daily_tasks(self):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
        1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.
        3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
        """
        try:
            await self.show_statistic()
            #await self.update_user_statuses()
            #await self.send_logs_to_admin()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
